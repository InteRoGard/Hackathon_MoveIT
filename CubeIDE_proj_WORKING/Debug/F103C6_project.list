
F103C6_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003398  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080034a4  080034a4  000044a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003530  08003530  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003530  08003530  00004530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003538  08003538  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003538  08003538  00004538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003540  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  080035b0  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080035b0  00005330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2a7  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd5  00000000  00000000  00011340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00013018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e3  00000000  00000000  00013b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e84  00000000  00000000  0001445b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e84b  00000000  00000000  000162df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fd8  00000000  00000000  00024b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9b02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  000a9b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ad020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800348c 	.word	0x0800348c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800348c 	.word	0x0800348c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  while (length--)
 8000674:	e022      	b.n	80006bc <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 8; i; i--)
 8000680:	2308      	movs	r3, #8
 8000682:	737b      	strb	r3, [r7, #13]
 8000684:	e017      	b.n	80006b6 <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8000686:	7bfa      	ldrb	r2, [r7, #15]
 8000688:	7bbb      	ldrb	r3, [r7, #14]
 800068a:	4053      	eors	r3, r2
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	085b      	lsrs	r3, r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]

      if (temp)
 800069a:	7b3b      	ldrb	r3, [r7, #12]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d004      	beq.n	80006aa <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80006a6:	43db      	mvns	r3, r3
 80006a8:	73fb      	strb	r3, [r7, #15]
      }

      currentByte >>= 1;
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	085b      	lsrs	r3, r3, #1
 80006ae:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 80006b0:	7b7b      	ldrb	r3, [r7, #13]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	737b      	strb	r3, [r7, #13]
 80006b6:	7b7b      	ldrb	r3, [r7, #13]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1e4      	bne.n	8000686 <CalculateChecksum+0x22>
  while (length--)
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	70fa      	strb	r2, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1d7      	bne.n	8000676 <CalculateChecksum+0x12>
    }
  }

  return checksum;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 80006d2:	b590      	push	{r4, r7, lr}
 80006d4:	b087      	sub	sp, #28
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e044      	b.n	8000774 <ExecuteCommand+0xa2>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	7a3a      	ldrb	r2, [r7, #8]
 80006f0:	4611      	mov	r1, r2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fc4e 	bl	8000f94 <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 80006f8:	7a7b      	ldrb	r3, [r7, #9]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d026      	beq.n	800074c <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
 8000702:	e00c      	b.n	800071e <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6858      	ldr	r0, [r3, #4]
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	18d4      	adds	r4, r2, r3
 800070e:	21ff      	movs	r1, #255	@ 0xff
 8000710:	f000 fc40 	bl	8000f94 <OneWire_ProcessByte>
 8000714:	4603      	mov	r3, r0
 8000716:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	3301      	adds	r3, #1
 800071c:	75fb      	strb	r3, [r7, #23]
 800071e:	7a7b      	ldrb	r3, [r7, #9]
 8000720:	7dfa      	ldrb	r2, [r7, #23]
 8000722:	429a      	cmp	r2, r3
 8000724:	d3ee      	bcc.n	8000704 <ExecuteCommand+0x32>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8000726:	7a7b      	ldrb	r3, [r7, #9]
 8000728:	3b01      	subs	r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff98 	bl	8000664 <CalculateChecksum>
 8000734:	4603      	mov	r3, r0
 8000736:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8000738:	7a7b      	ldrb	r3, [r7, #9]
 800073a:	3b01      	subs	r3, #1
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	7d7a      	ldrb	r2, [r7, #21]
 8000744:	429a      	cmp	r2, r3
 8000746:	d014      	beq.n	8000772 <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e013      	b.n	8000774 <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800074c:	2300      	movs	r3, #0
 800074e:	75bb      	strb	r3, [r7, #22]
 8000750:	e00b      	b.n	800076a <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6858      	ldr	r0, [r3, #4]
 8000756:	7dbb      	ldrb	r3, [r7, #22]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4619      	mov	r1, r3
 8000760:	f000 fc18 	bl	8000f94 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000764:	7dbb      	ldrb	r3, [r7, #22]
 8000766:	3301      	adds	r3, #1
 8000768:	75bb      	strb	r3, [r7, #22]
 800076a:	7abb      	ldrb	r3, [r7, #10]
 800076c:	7dba      	ldrb	r2, [r7, #22]
 800076e:	429a      	cmp	r2, r3
 8000770:	d3ef      	bcc.n	8000752 <ExecuteCommand+0x80>
    }
  }

  return DS18B20_OK;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2101      	movs	r1, #1
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fbe0 	bl	8000f50 <OneWire_ProcessBit>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 8000794:	e007      	b.n	80007a6 <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fbd7 	bl	8000f50 <OneWire_ProcessBit>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2bff      	cmp	r3, #255	@ 0xff
 80007aa:	d1f4      	bne.n	8000796 <WaitForConversionFinished+0x1a>
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 80007c4:	f107 030a 	add.w	r3, r7, #10
 80007c8:	491c      	ldr	r1, [pc, #112]	@ (800083c <DS18B20_ConvertT+0x84>)
 80007ca:	461a      	mov	r2, r3
 80007cc:	6809      	ldr	r1, [r1, #0]
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff7f 	bl	80006d2 <ExecuteCommand>
 80007d4:	4603      	mov	r3, r0
 80007d6:	72fb      	strb	r3, [r7, #11]

  if (waitCondition == DS18B20_DATA)
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d102      	bne.n	80007e4 <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffcc 	bl	800077c <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d123      	bne.n	8000832 <DS18B20_ConvertT+0x7a>
  {
    uint32_t delayValueMs = 1000;
 80007ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ee:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7c1b      	ldrb	r3, [r3, #16]
 80007f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f6:	d014      	beq.n	8000822 <DS18B20_ConvertT+0x6a>
 80007f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80007fa:	dc16      	bgt.n	800082a <DS18B20_ConvertT+0x72>
 80007fc:	2b5f      	cmp	r3, #95	@ 0x5f
 80007fe:	d00c      	beq.n	800081a <DS18B20_ConvertT+0x62>
 8000800:	2b5f      	cmp	r3, #95	@ 0x5f
 8000802:	dc12      	bgt.n	800082a <DS18B20_ConvertT+0x72>
 8000804:	2b1f      	cmp	r3, #31
 8000806:	d002      	beq.n	800080e <DS18B20_ConvertT+0x56>
 8000808:	2b3f      	cmp	r3, #63	@ 0x3f
 800080a:	d003      	beq.n	8000814 <DS18B20_ConvertT+0x5c>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 800080c:	e00d      	b.n	800082a <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 800080e:	235e      	movs	r3, #94	@ 0x5e
 8000810:	60fb      	str	r3, [r7, #12]
        break;
 8000812:	e00b      	b.n	800082c <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 8000814:	23bc      	movs	r3, #188	@ 0xbc
 8000816:	60fb      	str	r3, [r7, #12]
        break;
 8000818:	e008      	b.n	800082c <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 800081a:	f240 1377 	movw	r3, #375	@ 0x177
 800081e:	60fb      	str	r3, [r7, #12]
        break;
 8000820:	e004      	b.n	800082c <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8000822:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000826:	60fb      	str	r3, [r7, #12]
        break;
 8000828:	e000      	b.n	800082c <DS18B20_ConvertT+0x74>
        break;
 800082a:	bf00      	nop
    }

    HAL_Delay(delayValueMs);
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f000 fe3b 	bl	80014a8 <HAL_Delay>
  }

  return result;
 8000832:	7afb      	ldrb	r3, [r7, #11]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000010 	.word	0x20000010

08000840 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4938      	ldr	r1, [pc, #224]	@ (8000930 <DS18B20_ReadScratchpad+0xf0>)
 800084e:	461a      	mov	r2, r3
 8000850:	6809      	ldr	r1, [r1, #0]
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff3d 	bl	80006d2 <ExecuteCommand>
 8000858:	4603      	mov	r3, r0
 800085a:	757b      	strb	r3, [r7, #21]

  if (result != DS18B20_OK)
 800085c:	7d7b      	ldrb	r3, [r7, #21]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <DS18B20_ReadScratchpad+0x26>
  {
    return result;
 8000862:	7d7b      	ldrb	r3, [r7, #21]
 8000864:	e060      	b.n	8000928 <DS18B20_ReadScratchpad+0xe8>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8000866:	7aba      	ldrb	r2, [r7, #10]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 800086c:	7afa      	ldrb	r2, [r7, #11]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8000872:	7b3a      	ldrb	r2, [r7, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8000878:	7a7b      	ldrb	r3, [r7, #9]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	b21a      	sxth	r2, r3
 800087e:	7a3b      	ldrb	r3, [r7, #8]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 8000888:	8afb      	ldrh	r3, [r7, #22]
 800088a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800088e:	f023 0307 	bic.w	r3, r3, #7
 8000892:	827b      	strh	r3, [r7, #18]

  if (sign != 0)
 8000894:	8a7b      	ldrh	r3, [r7, #18]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <DS18B20_ReadScratchpad+0x60>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 800089a:	8afb      	ldrh	r3, [r7, #22]
 800089c:	425b      	negs	r3, r3
 800089e:	82fb      	strh	r3, [r7, #22]
  }

  switch (sensor->configRegister)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7c1b      	ldrb	r3, [r3, #16]
 80008a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a6:	d01d      	beq.n	80008e4 <DS18B20_ReadScratchpad+0xa4>
 80008a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008aa:	dc20      	bgt.n	80008ee <DS18B20_ReadScratchpad+0xae>
 80008ac:	2b5f      	cmp	r3, #95	@ 0x5f
 80008ae:	d012      	beq.n	80008d6 <DS18B20_ReadScratchpad+0x96>
 80008b0:	2b5f      	cmp	r3, #95	@ 0x5f
 80008b2:	dc1c      	bgt.n	80008ee <DS18B20_ReadScratchpad+0xae>
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	d002      	beq.n	80008be <DS18B20_ReadScratchpad+0x7e>
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	d005      	beq.n	80008c8 <DS18B20_ReadScratchpad+0x88>
 80008bc:	e017      	b.n	80008ee <DS18B20_ReadScratchpad+0xae>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 80008be:	8afb      	ldrh	r3, [r7, #22]
 80008c0:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80008c4:	82fb      	strh	r3, [r7, #22]
      break;
 80008c6:	e017      	b.n	80008f8 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 80008c8:	8afb      	ldrh	r3, [r7, #22]
 80008ca:	f023 0303 	bic.w	r3, r3, #3
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	0d5b      	lsrs	r3, r3, #21
 80008d2:	82fb      	strh	r3, [r7, #22]
      break;
 80008d4:	e010      	b.n	80008f8 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 80008d6:	8afb      	ldrh	r3, [r7, #22]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	055b      	lsls	r3, r3, #21
 80008de:	0d5b      	lsrs	r3, r3, #21
 80008e0:	82fb      	strh	r3, [r7, #22]
      break;
 80008e2:	e009      	b.n	80008f8 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 80008e4:	8afb      	ldrh	r3, [r7, #22]
 80008e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008ea:	82fb      	strh	r3, [r7, #22]
      break;
 80008ec:	e004      	b.n	80008f8 <DS18B20_ReadScratchpad+0xb8>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008f4:	82fb      	strh	r3, [r7, #22]
      break;
 80008f6:	bf00      	nop
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fce4 	bl	80002c8 <__aeabi_ui2f>
 8000900:	4603      	mov	r3, r0
 8000902:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fd36 	bl	8000378 <__aeabi_fmul>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 8000914:	8a7b      	ldrh	r3, [r7, #18]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <DS18B20_ReadScratchpad+0xe6>
  {
    sensor->temperature *= (-1);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000008 	.word	0x20000008

08000934 <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <DS18B20_WriteScratchpad+0x48>)
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff fec4 	bl	80006d2 <ExecuteCommand>
 800094a:	4603      	mov	r3, r0
 800094c:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <DS18B20_WriteScratchpad+0x24>
  {
    return result;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	e00c      	b.n	8000972 <DS18B20_WriteScratchpad+0x3e>
  }

  sensor->temperatureLimitHigh = data[0];
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = data[1];
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	785a      	ldrb	r2, [r3, #1]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = data[2];
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	741a      	strb	r2, [r3, #16]

  return result;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000000c 	.word	0x2000000c

08000980 <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e012      	b.n	80009ba <DS18B20_InitializationCommand+0x3a>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fb31 	bl	8001000 <OneWire_Reset>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]

  if (status == ONEWIRE_OK)
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e003      	b.n	80009ba <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 80009b8:	2301      	movs	r3, #1
  }
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4912      	ldr	r1, [pc, #72]	@ (8000a1c <DS18B20_ReadRom+0x58>)
 80009d2:	461a      	mov	r2, r3
 80009d4:	6809      	ldr	r1, [r1, #0]
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fe7b 	bl	80006d2 <ExecuteCommand>
 80009dc:	4603      	mov	r3, r0
 80009de:	75bb      	strb	r3, [r7, #22]

  if (result != DS18B20_OK)
 80009e0:	7dbb      	ldrb	r3, [r7, #22]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <DS18B20_ReadRom+0x26>
  {
    return result;
 80009e6:	7dbb      	ldrb	r3, [r7, #22]
 80009e8:	e014      	b.n	8000a14 <DS18B20_ReadRom+0x50>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	75fb      	strb	r3, [r7, #23]
 80009ee:	e00d      	b.n	8000a0c <DS18B20_ReadRom+0x48>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	7dfb      	ldrb	r3, [r7, #23]
 80009f6:	3218      	adds	r2, #24
 80009f8:	443a      	add	r2, r7
 80009fa:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	460a      	mov	r2, r1
 8000a04:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	75fb      	strb	r3, [r7, #23]
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	2b05      	cmp	r3, #5
 8000a10:	d9ee      	bls.n	80009f0 <DS18B20_ReadRom+0x2c>
  }

  return DS18B20_OK;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000

08000a20 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8000a28:	f107 030e 	add.w	r3, r7, #14
 8000a2c:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <DS18B20_SkipRom+0x30>)
 8000a2e:	461a      	mov	r2, r3
 8000a30:	6809      	ldr	r1, [r1, #0]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe4d 	bl	80006d2 <ExecuteCommand>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <DS18B20_SkipRom+0x26>
  {
    return result;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	e000      	b.n	8000a48 <DS18B20_SkipRom+0x28>
  }

  return DS18B20_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000004 	.word	0x20000004

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b096      	sub	sp, #88	@ 0x58
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const uint8_t hello[] = "Comitas Akademya\r\n";
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <main+0xdc>)
 8000a5c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000a60:	461d      	mov	r5, r3
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	8022      	strh	r2, [r4, #0]
 8000a6c:	3402      	adds	r4, #2
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fcb7 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f863 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 f955 	bl	8000d28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 f8ff 	bl	8000c80 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a82:	f000 f899 	bl	8000bb8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a86:	f000 f8c5 	bl	8000c14 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a8a:	f000 f923 	bl	8000cd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_InitializationCommand(&temperatureSensor);
 8000a8e:	4829      	ldr	r0, [pc, #164]	@ (8000b34 <main+0xe0>)
 8000a90:	f7ff ff76 	bl	8000980 <DS18B20_InitializationCommand>
  DS18B20_ReadRom(&temperatureSensor);
 8000a94:	4827      	ldr	r0, [pc, #156]	@ (8000b34 <main+0xe0>)
 8000a96:	f7ff ff95 	bl	80009c4 <DS18B20_ReadRom>
  DS18B20_ReadScratchpad(&temperatureSensor);
 8000a9a:	4826      	ldr	r0, [pc, #152]	@ (8000b34 <main+0xe0>)
 8000a9c:	f7ff fed0 	bl	8000840 <DS18B20_ReadScratchpad>
  char msg[64];
  uint8_t settings[3];
    settings[0] = temperatureSensor.temperatureLimitHigh;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <main+0xe0>)
 8000aa2:	7bdb      	ldrb	r3, [r3, #15]
 8000aa4:	703b      	strb	r3, [r7, #0]
    settings[1] = temperatureSensor.temperatureLimitLow;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <main+0xe0>)
 8000aa8:	7b9b      	ldrb	r3, [r3, #14]
 8000aaa:	707b      	strb	r3, [r7, #1]
    settings[2] = DS18B20_12_BITS_CONFIG;
 8000aac:	237f      	movs	r3, #127	@ 0x7f
 8000aae:	70bb      	strb	r3, [r7, #2]

    DS18B20_InitializationCommand(&temperatureSensor);
 8000ab0:	4820      	ldr	r0, [pc, #128]	@ (8000b34 <main+0xe0>)
 8000ab2:	f7ff ff65 	bl	8000980 <DS18B20_InitializationCommand>
    DS18B20_SkipRom(&temperatureSensor);
 8000ab6:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <main+0xe0>)
 8000ab8:	f7ff ffb2 	bl	8000a20 <DS18B20_SkipRom>
    DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481c      	ldr	r0, [pc, #112]	@ (8000b34 <main+0xe0>)
 8000ac2:	f7ff ff37 	bl	8000934 <DS18B20_WriteScratchpad>
  HAL_UART_Transmit(&huart1, hello, sizeof(hello) - 1, 100);
 8000ac6:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000aca:	2364      	movs	r3, #100	@ 0x64
 8000acc:	2212      	movs	r2, #18
 8000ace:	481a      	ldr	r0, [pc, #104]	@ (8000b38 <main+0xe4>)
 8000ad0:	f001 fe06 	bl	80026e0 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart1, IE, sizeof(IE) - 1, 100);
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000ad4:	4817      	ldr	r0, [pc, #92]	@ (8000b34 <main+0xe0>)
 8000ad6:	f7ff ff53 	bl	8000980 <DS18B20_InitializationCommand>
	  DS18B20_SkipRom(&temperatureSensor);
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <main+0xe0>)
 8000adc:	f7ff ffa0 	bl	8000a20 <DS18B20_SkipRom>
	  DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA); //ERROR
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4814      	ldr	r0, [pc, #80]	@ (8000b34 <main+0xe0>)
 8000ae4:	f7ff fe68 	bl	80007b8 <DS18B20_ConvertT>
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000ae8:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <main+0xe0>)
 8000aea:	f7ff ff49 	bl	8000980 <DS18B20_InitializationCommand>
	  DS18B20_SkipRom(&temperatureSensor);
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <main+0xe0>)
 8000af0:	f7ff ff96 	bl	8000a20 <DS18B20_SkipRom>
	  DS18B20_ReadScratchpad(&temperatureSensor);
 8000af4:	480f      	ldr	r0, [pc, #60]	@ (8000b34 <main+0xe0>)
 8000af6:	f7ff fea3 	bl	8000840 <DS18B20_ReadScratchpad>
	  snprintf(msg, sizeof(msg), "Temperature: %d\r\n", (int16_t)temperatureSensor.temperature);
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <main+0xe0>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fd8a 	bl	8000618 <__aeabi_f2iz>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	1d38      	adds	r0, r7, #4
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <main+0xe8>)
 8000b0c:	2140      	movs	r1, #64	@ 0x40
 8000b0e:	f001 fff9 	bl	8002b04 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb19 	bl	800014c <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	1d39      	adds	r1, r7, #4
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <main+0xe4>)
 8000b26:	f001 fddb 	bl	80026e0 <HAL_UART_Transmit>
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000b2a:	bf00      	nop
 8000b2c:	e7d2      	b.n	8000ad4 <main+0x80>
 8000b2e:	bf00      	nop
 8000b30:	080034bc 	.word	0x080034bc
 8000b34:	200001c8 	.word	0x200001c8
 8000b38:	20000138 	.word	0x20000138
 8000b3c:	080034a8 	.word	0x080034a8

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b090      	sub	sp, #64	@ 0x40
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	2228      	movs	r2, #40	@ 0x28
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 f80c 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f876 	bl	8001c68 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b82:	f000 f925 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fae4 	bl	800216c <HAL_RCC_ClockConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f911 	bl	8000dd0 <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3740      	adds	r7, #64	@ 0x40
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bbe:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <MX_I2C1_Init+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bc4:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <MX_I2C1_Init+0x58>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_I2C1_Init+0x50>)
 8000bf6:	f000 fef3 	bl	80019e0 <HAL_I2C_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 f8e6 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000008c 	.word	0x2000008c
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	000186a0 	.word	0x000186a0

08000c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c1a:	4a18      	ldr	r2, [pc, #96]	@ (8000c7c <MX_SPI1_Init+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c60:	220a      	movs	r2, #10
 8000c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_SPI1_Init+0x64>)
 8000c66:	f001 fc0f 	bl	8002488 <HAL_SPI_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c70:	f000 f8ae 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000e0 	.word	0x200000e0
 8000c7c:	40013000 	.word	0x40013000

08000c80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <MX_USART1_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_USART1_UART_Init+0x4c>)
 8000cb8:	f001 fc6a 	bl	8002590 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f885 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000138 	.word	0x20000138
 8000cd0:	40013800 	.word	0x40013800

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f001 fc90 	bl	8002630 <HAL_HalfDuplex_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f85b 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000180 	.word	0x20000180
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_GPIO_Init+0x9c>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART1_CK_GPIO_Port, USART1_CK_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d72:	4815      	ldr	r0, [pc, #84]	@ (8000dc8 <MX_GPIO_Init+0xa0>)
 8000d74:	f000 fe1c 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_CLK_GPIO_Port, I2C_CLK_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4813      	ldr	r0, [pc, #76]	@ (8000dcc <MX_GPIO_Init+0xa4>)
 8000d7e:	f000 fe17 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USART1_CK_Pin */
  GPIO_InitStruct.Pin = USART1_CK_Pin;
 8000d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2302      	movs	r3, #2
 8000d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USART1_CK_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <MX_GPIO_Init+0xa0>)
 8000d9c:	f000 fc8c 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_CLK_Pin */
  GPIO_InitStruct.Pin = I2C_CLK_Pin;
 8000da0:	2320      	movs	r3, #32
 8000da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(I2C_CLK_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_GPIO_Init+0xa4>)
 8000db8:	f000 fc7e 	bl	80016b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t pclk = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  huart->Init.BaudRate = baudrate;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a54      	ldr	r2, [pc, #336]	@ (8000f48 <SetBaudrate+0x16c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d103      	bne.n	8000e02 <SetBaudrate+0x26>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000dfa:	f001 fb13 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	e002      	b.n	8000e08 <SetBaudrate+0x2c>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e02:	f001 fafb 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8000e06:	60f8      	str	r0, [r7, #12]
    }

  if (huart->Init.OverSampling == UART_OVERSAMPLING_16)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14c      	bne.n	8000eaa <SetBaudrate+0xce>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	441a      	add	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4a49      	ldr	r2, [pc, #292]	@ (8000f4c <SetBaudrate+0x170>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	095b      	lsrs	r3, r3, #5
 8000e2e:	0119      	lsls	r1, r3, #4
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	009a      	lsls	r2, r3, #2
 8000e3a:	441a      	add	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e46:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <SetBaudrate+0x170>)
 8000e48:	fba3 0302 	umull	r0, r3, r3, r2
 8000e4c:	095b      	lsrs	r3, r3, #5
 8000e4e:	2064      	movs	r0, #100	@ 0x64
 8000e50:	fb00 f303 	mul.w	r3, r0, r3
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	3332      	adds	r3, #50	@ 0x32
 8000e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f4c <SetBaudrate+0x170>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8000e68:	4419      	add	r1, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	009a      	lsls	r2, r3, #2
 8000e74:	441a      	add	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <SetBaudrate+0x170>)
 8000e82:	fba3 0302 	umull	r0, r3, r3, r2
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2064      	movs	r0, #100	@ 0x64
 8000e8a:	fb00 f303 	mul.w	r3, r0, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	3332      	adds	r3, #50	@ 0x32
 8000e94:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <SetBaudrate+0x170>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	f003 0207 	and.w	r2, r3, #7
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	440a      	add	r2, r1
 8000ea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000ea8:	e04a      	b.n	8000f40 <SetBaudrate+0x164>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009a      	lsls	r2, r3, #2
 8000eb4:	441a      	add	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec0:	4a22      	ldr	r2, [pc, #136]	@ (8000f4c <SetBaudrate+0x170>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	0119      	lsls	r1, r3, #4
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009a      	lsls	r2, r3, #2
 8000ed4:	441a      	add	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <SetBaudrate+0x170>)
 8000ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	fb00 f303 	mul.w	r3, r0, r3
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	3332      	adds	r3, #50	@ 0x32
 8000ef4:	4a15      	ldr	r2, [pc, #84]	@ (8000f4c <SetBaudrate+0x170>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f00:	4419      	add	r1, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	009a      	lsls	r2, r3, #2
 8000f0c:	441a      	add	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <SetBaudrate+0x170>)
 8000f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2064      	movs	r0, #100	@ 0x64
 8000f22:	fb00 f303 	mul.w	r3, r0, r3
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	3332      	adds	r3, #50	@ 0x32
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <SetBaudrate+0x170>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	f003 020f 	and.w	r2, r3, #15
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	440a      	add	r2, r1
 8000f3e:	609a      	str	r2, [r3, #8]
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	51eb851f 	.word	0x51eb851f

08000f50 <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  uint8_t txData = 0xFF;
 8000f5c:	23ff      	movs	r3, #255	@ 0xff
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint8_t rxData = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73bb      	strb	r3, [r7, #14]

  if (bit == 0)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <OneWire_ProcessBit+0x1e>
  {
    txData = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8000f6e:	f107 010f 	add.w	r1, r7, #15
 8000f72:	230a      	movs	r3, #10
 8000f74:	2201      	movs	r2, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f001 fbb2 	bl	80026e0 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8000f7c:	f107 010e 	add.w	r1, r7, #14
 8000f80:	230a      	movs	r3, #10
 8000f82:	2201      	movs	r2, #1
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 fc2e 	bl	80027e6 <HAL_UART_Receive>

  return rxData;
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  uint8_t rxByte = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
 8000fa8:	e022      	b.n	8000ff0 <OneWire_ProcessByte+0x5c>
  {
    uint8_t txBit = (byte >> i) & 0x01;
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	fa42 f303 	asr.w	r3, r2, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	733b      	strb	r3, [r7, #12]
    uint8_t rxBit = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffc4 	bl	8000f50 <OneWire_ProcessBit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	72fb      	strb	r3, [r7, #11]

    if (tempRxData == 0xFF)
 8000fcc:	7afb      	ldrb	r3, [r7, #11]
 8000fce:	2bff      	cmp	r3, #255	@ 0xff
 8000fd0:	d101      	bne.n	8000fd6 <OneWire_ProcessByte+0x42>
    {
      rxBit = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
    }

    rxByte |= (rxBit << i);
 8000fd6:	7b7a      	ldrb	r2, [r7, #13]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73bb      	strb	r3, [r7, #14]
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	d9d9      	bls.n	8000faa <OneWire_ProcessByte+0x16>
  }

  return rxByte;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  ONEWIRE_Status status = ONEWIRE_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 800100c:	23f0      	movs	r3, #240	@ 0xf0
 800100e:	73bb      	strb	r3, [r7, #14]
  uint8_t rxByte = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	737b      	strb	r3, [r7, #13]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8001014:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fedf 	bl	8000ddc <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 800101e:	f107 010e 	add.w	r1, r7, #14
 8001022:	230a      	movs	r3, #10
 8001024:	2201      	movs	r2, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f001 fb5a 	bl	80026e0 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 800102c:	f107 010d 	add.w	r1, r7, #13
 8001030:	230a      	movs	r3, #10
 8001032:	2201      	movs	r2, #1
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fbd6 	bl	80027e6 <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 800103a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fecc 	bl	8000ddc <SetBaudrate>

  if (rxByte == txByte)
 8001044:	7b7a      	ldrb	r2, [r7, #13]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	429a      	cmp	r2, r3
 800104a:	d101      	bne.n	8001050 <OneWire_Reset+0x50>
  {
    status = ONEWIRE_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <HAL_MspInit+0x60>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_MspInit+0x60>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000

080010c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <HAL_I2C_MspInit+0x74>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d125      	bne.n	800112c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f8:	23c0      	movs	r3, #192	@ 0xc0
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fc:	2312      	movs	r3, #18
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <HAL_I2C_MspInit+0x7c>)
 8001110:	f000 fad2 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	61d3      	str	r3, [r2, #28]
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_I2C_MspInit+0x78>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010c00 	.word	0x40010c00

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1b      	ldr	r2, [pc, #108]	@ (80011c8 <HAL_SPI_MspInit+0x88>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d12f      	bne.n	80011c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 8001166:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0x8c>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001190:	23a0      	movs	r3, #160	@ 0xa0
 8001192:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <HAL_SPI_MspInit+0x90>)
 80011a4:	f000 fa88 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a8:	2340      	movs	r3, #64	@ 0x40
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_SPI_MspInit+0x90>)
 80011bc:	f000 fa7c 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013000 	.word	0x40013000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010800 	.word	0x40010800

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a32      	ldr	r2, [pc, #200]	@ (80012b8 <HAL_UART_MspInit+0xe4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d132      	bne.n	800125a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f4:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	4619      	mov	r1, r3
 8001238:	4821      	ldr	r0, [pc, #132]	@ (80012c0 <HAL_UART_MspInit+0xec>)
 800123a:	f000 fa3d 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800123e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4619      	mov	r1, r3
 8001252:	481b      	ldr	r0, [pc, #108]	@ (80012c0 <HAL_UART_MspInit+0xec>)
 8001254:	f000 fa30 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001258:	e02a      	b.n	80012b0 <HAL_UART_MspInit+0xdc>
  else if(huart->Instance==USART2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0xf0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d125      	bne.n	80012b0 <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126e:	61d3      	str	r3, [r2, #28]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_UART_MspInit+0xe8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001294:	2304      	movs	r3, #4
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <HAL_UART_MspInit+0xec>)
 80012ac:	f000 fa04 	bl	80016b8 <HAL_GPIO_Init>
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40004400 	.word	0x40004400

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f8aa 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f001 fc14 	bl	8002b7c <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20002800 	.word	0x20002800
 8001380:	00000400 	.word	0x00000400
 8001384:	200001e0 	.word	0x200001e0
 8001388:	20000330 	.word	0x20000330

0800138c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff fff8 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480b      	ldr	r0, [pc, #44]	@ (80013cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139e:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a0:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b4:	4c09      	ldr	r4, [pc, #36]	@ (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f001 fbe1 	bl	8002b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff fb45 	bl	8000a54 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013d4:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 80013d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013dc:	20000330 	.word	0x20000330

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f92b 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fe2c 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f935 	bl	800169e <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f90b 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000014 	.word	0x20000014
 8001468:	2000001c 	.word	0x2000001c
 800146c:	20000018 	.word	0x20000018

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	@ (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	2000001c 	.word	0x2000001c
 8001490:	200001e4 	.word	0x200001e4

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200001e4 	.word	0x200001e4

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff fff0 	bl	8001494 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffe0 	bl	8001494 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000001c 	.word	0x2000001c

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	@ (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	@ (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	@ 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff90 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff49 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff5e 	bl	8001538 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff90 	bl	80015a8 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5f 	bl	8001554 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffb0 	bl	800160c <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b08b      	sub	sp, #44	@ 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e161      	b.n	8001990 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016cc:	2201      	movs	r2, #1
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8150 	bne.w	800198a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a97      	ldr	r2, [pc, #604]	@ (800194c <HAL_GPIO_Init+0x294>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 80016f4:	4a95      	ldr	r2, [pc, #596]	@ (800194c <HAL_GPIO_Init+0x294>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d875      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 80016fa:	4a95      	ldr	r2, [pc, #596]	@ (8001950 <HAL_GPIO_Init+0x298>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d058      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001700:	4a93      	ldr	r2, [pc, #588]	@ (8001950 <HAL_GPIO_Init+0x298>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d86f      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001706:	4a93      	ldr	r2, [pc, #588]	@ (8001954 <HAL_GPIO_Init+0x29c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 800170c:	4a91      	ldr	r2, [pc, #580]	@ (8001954 <HAL_GPIO_Init+0x29c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d869      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001712:	4a91      	ldr	r2, [pc, #580]	@ (8001958 <HAL_GPIO_Init+0x2a0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04c      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001718:	4a8f      	ldr	r2, [pc, #572]	@ (8001958 <HAL_GPIO_Init+0x2a0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d863      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800171e:	4a8f      	ldr	r2, [pc, #572]	@ (800195c <HAL_GPIO_Init+0x2a4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d046      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001724:	4a8d      	ldr	r2, [pc, #564]	@ (800195c <HAL_GPIO_Init+0x2a4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d85d      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d82a      	bhi.n	8001784 <HAL_GPIO_Init+0xcc>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d859      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001732:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <HAL_GPIO_Init+0x80>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b3 	.word	0x080017b3
 800173c:	0800178d 	.word	0x0800178d
 8001740:	0800179f 	.word	0x0800179f
 8001744:	080017e1 	.word	0x080017e1
 8001748:	080017e7 	.word	0x080017e7
 800174c:	080017e7 	.word	0x080017e7
 8001750:	080017e7 	.word	0x080017e7
 8001754:	080017e7 	.word	0x080017e7
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e7 	.word	0x080017e7
 8001760:	080017e7 	.word	0x080017e7
 8001764:	080017e7 	.word	0x080017e7
 8001768:	080017e7 	.word	0x080017e7
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017e7 	.word	0x080017e7
 8001774:	080017e7 	.word	0x080017e7
 8001778:	080017e7 	.word	0x080017e7
 800177c:	08001795 	.word	0x08001795
 8001780:	080017a9 	.word	0x080017a9
 8001784:	4a76      	ldr	r2, [pc, #472]	@ (8001960 <HAL_GPIO_Init+0x2a8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e029      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e024      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01f      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e01a      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e013      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e009      	b.n	80017e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          break;
 80017e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	@ 0xff
 80017ec:	d801      	bhi.n	80017f2 <HAL_GPIO_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_Init+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	@ 0xff
 80017fc:	d802      	bhi.n	8001804 <HAL_GPIO_Init+0x14c>
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x152>
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	3b08      	subs	r3, #8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	210f      	movs	r1, #15
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80a9 	beq.w	800198a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001838:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <HAL_GPIO_Init+0x2ac>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a49      	ldr	r2, [pc, #292]	@ (8001964 <HAL_GPIO_Init+0x2ac>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_GPIO_Init+0x2ac>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001850:	4a45      	ldr	r2, [pc, #276]	@ (8001968 <HAL_GPIO_Init+0x2b0>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3d      	ldr	r2, [pc, #244]	@ (800196c <HAL_GPIO_Init+0x2b4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_GPIO_Init+0x1e0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3c      	ldr	r2, [pc, #240]	@ (8001970 <HAL_GPIO_Init+0x2b8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d007      	beq.n	8001894 <HAL_GPIO_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3b      	ldr	r2, [pc, #236]	@ (8001974 <HAL_GPIO_Init+0x2bc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_GPIO_Init+0x1d8>
 800188c:	2302      	movs	r3, #2
 800188e:	e004      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001890:	2303      	movs	r3, #3
 8001892:	e002      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_GPIO_Init+0x1e2>
 8001898:	2300      	movs	r3, #0
 800189a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189c:	f002 0203 	and.w	r2, r2, #3
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	4093      	lsls	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018aa:	492f      	ldr	r1, [pc, #188]	@ (8001968 <HAL_GPIO_Init+0x2b0>)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	492b      	ldr	r1, [pc, #172]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4927      	ldr	r1, [pc, #156]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4921      	ldr	r1, [pc, #132]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	491d      	ldr	r1, [pc, #116]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 8001904:	4013      	ands	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4917      	ldr	r1, [pc, #92]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4913      	ldr	r1, [pc, #76]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01f      	beq.n	800197c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	490d      	ldr	r1, [pc, #52]	@ (8001978 <HAL_GPIO_Init+0x2c0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e01f      	b.n	800198a <HAL_GPIO_Init+0x2d2>
 800194a:	bf00      	nop
 800194c:	10320000 	.word	0x10320000
 8001950:	10310000 	.word	0x10310000
 8001954:	10220000 	.word	0x10220000
 8001958:	10210000 	.word	0x10210000
 800195c:	10120000 	.word	0x10120000
 8001960:	10110000 	.word	0x10110000
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	40010800 	.word	0x40010800
 8001970:	40010c00 	.word	0x40010c00
 8001974:	40011000 	.word	0x40011000
 8001978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_GPIO_Init+0x2f4>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4909      	ldr	r1, [pc, #36]	@ (80019ac <HAL_GPIO_Init+0x2f4>)
 8001986:	4013      	ands	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f ae96 	bne.w	80016cc <HAL_GPIO_Init+0x14>
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	372c      	adds	r7, #44	@ 0x2c
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e12b      	b.n	8001c4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fb5a 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	@ 0x24
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a44:	f000 fcda 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8001a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a81      	ldr	r2, [pc, #516]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d807      	bhi.n	8001a64 <HAL_I2C_Init+0x84>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4a80      	ldr	r2, [pc, #512]	@ (8001c58 <HAL_I2C_Init+0x278>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bf94      	ite	ls
 8001a5c:	2301      	movls	r3, #1
 8001a5e:	2300      	movhi	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e006      	b.n	8001a72 <HAL_I2C_Init+0x92>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4a7d      	ldr	r2, [pc, #500]	@ (8001c5c <HAL_I2C_Init+0x27c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	bf94      	ite	ls
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	2300      	movhi	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0e7      	b.n	8001c4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4a78      	ldr	r2, [pc, #480]	@ (8001c60 <HAL_I2C_Init+0x280>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9b      	lsrs	r3, r3, #18
 8001a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d802      	bhi.n	8001ab4 <HAL_I2C_Init+0xd4>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	e009      	b.n	8001ac8 <HAL_I2C_Init+0xe8>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	4a69      	ldr	r2, [pc, #420]	@ (8001c64 <HAL_I2C_Init+0x284>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ada:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	495c      	ldr	r1, [pc, #368]	@ (8001c54 <HAL_I2C_Init+0x274>)
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	d819      	bhi.n	8001b1c <HAL_I2C_Init+0x13c>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e59      	subs	r1, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af6:	1c59      	adds	r1, r3, #1
 8001af8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001afc:	400b      	ands	r3, r1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_I2C_Init+0x138>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1e59      	subs	r1, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b16:	e051      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e04f      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d111      	bne.n	8001b48 <HAL_I2C_Init+0x168>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e012      	b.n	8001b6e <HAL_I2C_Init+0x18e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Init+0x196>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e022      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10e      	bne.n	8001b9c <HAL_I2C_Init+0x1bc>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e58      	subs	r0, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	440b      	add	r3, r1
 8001b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9a:	e00f      	b.n	8001bbc <HAL_I2C_Init+0x1dc>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6911      	ldr	r1, [r2, #16]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	4311      	orrs	r1, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	000186a0 	.word	0x000186a0
 8001c58:	001e847f 	.word	0x001e847f
 8001c5c:	003d08ff 	.word	0x003d08ff
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	10624dd3 	.word	0x10624dd3

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e272      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b92      	ldr	r3, [pc, #584]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d112      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x12c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d168      	bne.n	8001d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e24c      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x76>
 8001cd0:	4b80      	ldr	r3, [pc, #512]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0xbc>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d24:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b68      	ldr	r3, [pc, #416]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fba6 	bl	8001494 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fba2 	bl	8001494 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e200      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe4>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb92 	bl	8001494 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fb8e 	bl	8001494 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	@ 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1ec      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x10c>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dae:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
 8001dba:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1c0      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4939      	ldr	r1, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb47 	bl	8001494 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fb43 	bl	8001494 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1a1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4927      	ldr	r1, [pc, #156]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fb26 	bl	8001494 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb22 	bl	8001494 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e180      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03a      	beq.n	8001eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0x274>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fb06 	bl	8001494 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fb02 	bl	8001494 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e160      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 face 	bl	800244c <RCC_Delay>
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff faec 	bl	8001494 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fae8 	bl	8001494 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e146      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a6 	beq.w	8002046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b82      	ldr	r3, [pc, #520]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b7f      	ldr	r3, [pc, #508]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff faa9 	bl	8001494 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff faa5 	bl	8001494 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	@ 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e103      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b75      	ldr	r3, [pc, #468]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001f82:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a69      	ldr	r2, [pc, #420]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b67      	ldr	r3, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a66      	ldr	r2, [pc, #408]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x356>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b58      	ldr	r3, [pc, #352]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a57      	ldr	r2, [pc, #348]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa59 	bl	8001494 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fa55 	bl	8001494 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x37e>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fa43 	bl	8001494 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fa3f 	bl	8001494 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e09b      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3c      	ldr	r3, [pc, #240]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d061      	beq.n	8002120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d146      	bne.n	80020f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fa13 	bl	8001494 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fa0f 	bl	8001494 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e06d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	4b29      	ldr	r3, [pc, #164]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002098:	d108      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4921      	ldr	r1, [pc, #132]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a19      	ldr	r1, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	430b      	orrs	r3, r1
 80020be:	491b      	ldr	r1, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff f9e3 	bl	8001494 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f9df 	bl	8001494 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46a>
 80020f0:	e035      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff f9cc 	bl	8001494 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff f9c8 	bl	8001494 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e026      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x498>
 800211e:	e01e      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e019      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_OscConfig+0x500>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff f91a 	bl	8001494 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f916 	bl	8001494 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f878 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	080034d0 	.word	0x080034d0
 8002338:	20000014 	.word	0x20000014
 800233c:	20000018 	.word	0x20000018

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235a:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x36>
 800236e:	e027      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e027      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0c9b      	lsrs	r3, r3, #18
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0c5b      	lsrs	r3, r3, #17
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	fb03 f202 	mul.w	r2, r3, r2
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	613b      	str	r3, [r7, #16]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	693b      	ldr	r3, [r7, #16]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	080034e8 	.word	0x080034e8
 80023e0:	080034f8 	.word	0x080034f8
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b02      	ldr	r3, [pc, #8]	@ (80023f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000014 	.word	0x20000014

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff2 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	080034e0 	.word	0x080034e0

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffde 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	080034e0 	.word	0x080034e0

0800244c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <RCC_Delay+0x34>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <RCC_Delay+0x38>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0a5b      	lsrs	r3, r3, #9
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002468:	bf00      	nop
  }
  while (Delay --);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f9      	bne.n	8002468 <RCC_Delay+0x1c>
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000014 	.word	0x20000014
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e076      	b.n	8002588 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024aa:	d009      	beq.n	80024c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
 80024b2:	e005      	b.n	80024c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fe30 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002544:	ea42 0103 	orr.w	r1, r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	0c1a      	lsrs	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f002 0204 	and.w	r2, r2, #4
 8002566:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002576:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e042      	b.n	8002628 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fe0c 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	@ 0x24
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa07 	bl	80029e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e04a      	b.n	80026d8 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fdbc 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9b7 	bl	80029e8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0208 	orr.w	r2, r2, #8
 80026a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d16d      	bne.n	80027dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Transmit+0x2c>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e066      	b.n	80027de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2221      	movs	r2, #33	@ 0x21
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800271e:	f7fe feb9 	bl	8001494 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002738:	d108      	bne.n	800274c <HAL_UART_Transmit+0x6c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d104      	bne.n	800274c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	e003      	b.n	8002754 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002754:	e02a      	b.n	80027ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8d2 	bl	800290a <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e036      	b.n	80027de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3302      	adds	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e007      	b.n	800279e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3301      	adds	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1cf      	bne.n	8002756 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	2140      	movs	r1, #64	@ 0x40
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f8a2 	bl	800290a <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e006      	b.n	80027de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b08a      	sub	sp, #40	@ 0x28
 80027ea:	af02      	add	r7, sp, #8
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	d17c      	bne.n	8002900 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_UART_Receive+0x2c>
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e075      	b.n	8002902 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	@ 0x22
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fe33 	bl	8001494 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Receive+0x72>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002860:	e043      	b.n	80028ea <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2120      	movs	r1, #32
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f84c 	bl	800290a <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e042      	b.n	8002902 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	b29a      	uxth	r2, r3
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	3302      	adds	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e01f      	b.n	80028dc <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a4:	d007      	beq.n	80028b6 <HAL_UART_Receive+0xd0>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_UART_Receive+0xde>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e008      	b.n	80028d6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1b6      	bne.n	8002862 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b090      	sub	sp, #64	@ 0x40
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291a:	e050      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d04c      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <UART_WaitOnFlagUntilTimeout+0x30>
 800292a:	f7fe fdb3 	bl	8001494 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002936:	429a      	cmp	r2, r3
 8002938:	d241      	bcs.n	80029be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800295a:	637a      	str	r2, [r7, #52]	@ 0x34
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	613b      	str	r3, [r7, #16]
   return(result);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800298e:	623a      	str	r2, [r7, #32]
 8002990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	69f9      	ldr	r1, [r7, #28]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	61bb      	str	r3, [r7, #24]
   return(result);
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e5      	bne.n	800296e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d09f      	beq.n	800291c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3740      	adds	r7, #64	@ 0x40
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a22:	f023 030c 	bic.w	r3, r3, #12
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002afc <UART_SetConfig+0x114>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a50:	f7ff fce8 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	e002      	b.n	8002a5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a58:	f7ff fcd0 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8002a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	4a22      	ldr	r2, [pc, #136]	@ (8002b00 <UART_SetConfig+0x118>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	0119      	lsls	r1, r3, #4
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <UART_SetConfig+0x118>)
 8002a96:	fba3 0302 	umull	r0, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2064      	movs	r0, #100	@ 0x64
 8002a9e:	fb00 f303 	mul.w	r3, r0, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	@ 0x32
 8002aa8:	4a15      	ldr	r2, [pc, #84]	@ (8002b00 <UART_SetConfig+0x118>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab4:	4419      	add	r1, r3
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	441a      	add	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <UART_SetConfig+0x118>)
 8002ace:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2064      	movs	r0, #100	@ 0x64
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	3332      	adds	r3, #50	@ 0x32
 8002ae0:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <UART_SetConfig+0x118>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	440a      	add	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40013800 	.word	0x40013800
 8002b00:	51eb851f 	.word	0x51eb851f

08002b04 <sniprintf>:
 8002b04:	b40c      	push	{r2, r3}
 8002b06:	b530      	push	{r4, r5, lr}
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <sniprintf+0x64>)
 8002b0a:	1e0c      	subs	r4, r1, #0
 8002b0c:	681d      	ldr	r5, [r3, #0]
 8002b0e:	b09d      	sub	sp, #116	@ 0x74
 8002b10:	da08      	bge.n	8002b24 <sniprintf+0x20>
 8002b12:	238b      	movs	r3, #139	@ 0x8b
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	b01d      	add	sp, #116	@ 0x74
 8002b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b20:	b002      	add	sp, #8
 8002b22:	4770      	bx	lr
 8002b24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b2c:	bf0c      	ite	eq
 8002b2e:	4623      	moveq	r3, r4
 8002b30:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b3c:	9002      	str	r0, [sp, #8]
 8002b3e:	9006      	str	r0, [sp, #24]
 8002b40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b44:	4628      	mov	r0, r5
 8002b46:	ab21      	add	r3, sp, #132	@ 0x84
 8002b48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b4a:	a902      	add	r1, sp, #8
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	f000 f993 	bl	8002e78 <_svfiprintf_r>
 8002b52:	1c43      	adds	r3, r0, #1
 8002b54:	bfbc      	itt	lt
 8002b56:	238b      	movlt	r3, #139	@ 0x8b
 8002b58:	602b      	strlt	r3, [r5, #0]
 8002b5a:	2c00      	cmp	r4, #0
 8002b5c:	d0dd      	beq.n	8002b1a <sniprintf+0x16>
 8002b5e:	2200      	movs	r2, #0
 8002b60:	9b02      	ldr	r3, [sp, #8]
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e7d9      	b.n	8002b1a <sniprintf+0x16>
 8002b66:	bf00      	nop
 8002b68:	20000020 	.word	0x20000020

08002b6c <memset>:
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4402      	add	r2, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <__errno>:
 8002b7c:	4b01      	ldr	r3, [pc, #4]	@ (8002b84 <__errno+0x8>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000020 	.word	0x20000020

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	4d0c      	ldr	r5, [pc, #48]	@ (8002bc0 <__libc_init_array+0x38>)
 8002b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc4 <__libc_init_array+0x3c>)
 8002b90:	1b64      	subs	r4, r4, r5
 8002b92:	10a4      	asrs	r4, r4, #2
 8002b94:	42a6      	cmp	r6, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	f000 fc78 	bl	800348c <_init>
 8002b9c:	2600      	movs	r6, #0
 8002b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8002bc8 <__libc_init_array+0x40>)
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bcc <__libc_init_array+0x44>)
 8002ba2:	1b64      	subs	r4, r4, r5
 8002ba4:	10a4      	asrs	r4, r4, #2
 8002ba6:	42a6      	cmp	r6, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb0:	4798      	blx	r3
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bba:	4798      	blx	r3
 8002bbc:	3601      	adds	r6, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08003538 	.word	0x08003538
 8002bc4:	08003538 	.word	0x08003538
 8002bc8:	08003538 	.word	0x08003538
 8002bcc:	0800353c 	.word	0x0800353c

08002bd0 <__retarget_lock_acquire_recursive>:
 8002bd0:	4770      	bx	lr

08002bd2 <__retarget_lock_release_recursive>:
 8002bd2:	4770      	bx	lr

08002bd4 <_free_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d040      	beq.n	8002c5e <_free_r+0x8a>
 8002bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be0:	1f0c      	subs	r4, r1, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfb8      	it	lt
 8002be6:	18e4      	addlt	r4, r4, r3
 8002be8:	f000 f8de 	bl	8002da8 <__malloc_lock>
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <_free_r+0x8c>)
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	b933      	cbnz	r3, 8002c00 <_free_r+0x2c>
 8002bf2:	6063      	str	r3, [r4, #4]
 8002bf4:	6014      	str	r4, [r2, #0]
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bfc:	f000 b8da 	b.w	8002db4 <__malloc_unlock>
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	d908      	bls.n	8002c16 <_free_r+0x42>
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	1821      	adds	r1, r4, r0
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	bf01      	itttt	eq
 8002c0c:	6819      	ldreq	r1, [r3, #0]
 8002c0e:	685b      	ldreq	r3, [r3, #4]
 8002c10:	1809      	addeq	r1, r1, r0
 8002c12:	6021      	streq	r1, [r4, #0]
 8002c14:	e7ed      	b.n	8002bf2 <_free_r+0x1e>
 8002c16:	461a      	mov	r2, r3
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	b10b      	cbz	r3, 8002c20 <_free_r+0x4c>
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d9fa      	bls.n	8002c16 <_free_r+0x42>
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	1850      	adds	r0, r2, r1
 8002c24:	42a0      	cmp	r0, r4
 8002c26:	d10b      	bne.n	8002c40 <_free_r+0x6c>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	4401      	add	r1, r0
 8002c2c:	1850      	adds	r0, r2, r1
 8002c2e:	4283      	cmp	r3, r0
 8002c30:	6011      	str	r1, [r2, #0]
 8002c32:	d1e0      	bne.n	8002bf6 <_free_r+0x22>
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4408      	add	r0, r1
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	6053      	str	r3, [r2, #4]
 8002c3e:	e7da      	b.n	8002bf6 <_free_r+0x22>
 8002c40:	d902      	bls.n	8002c48 <_free_r+0x74>
 8002c42:	230c      	movs	r3, #12
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	e7d6      	b.n	8002bf6 <_free_r+0x22>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	bf01      	itttt	eq
 8002c50:	6819      	ldreq	r1, [r3, #0]
 8002c52:	685b      	ldreq	r3, [r3, #4]
 8002c54:	1809      	addeq	r1, r1, r0
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6054      	str	r4, [r2, #4]
 8002c5c:	e7cb      	b.n	8002bf6 <_free_r+0x22>
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
 8002c60:	2000032c 	.word	0x2000032c

08002c64 <sbrk_aligned>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4e0f      	ldr	r6, [pc, #60]	@ (8002ca4 <sbrk_aligned+0x40>)
 8002c68:	460c      	mov	r4, r1
 8002c6a:	6831      	ldr	r1, [r6, #0]
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	b911      	cbnz	r1, 8002c76 <sbrk_aligned+0x12>
 8002c70:	f000 fbaa 	bl	80033c8 <_sbrk_r>
 8002c74:	6030      	str	r0, [r6, #0]
 8002c76:	4621      	mov	r1, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 fba5 	bl	80033c8 <_sbrk_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d103      	bne.n	8002c8a <sbrk_aligned+0x26>
 8002c82:	f04f 34ff 	mov.w	r4, #4294967295
 8002c86:	4620      	mov	r0, r4
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	1cc4      	adds	r4, r0, #3
 8002c8c:	f024 0403 	bic.w	r4, r4, #3
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	d0f8      	beq.n	8002c86 <sbrk_aligned+0x22>
 8002c94:	1a21      	subs	r1, r4, r0
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 fb96 	bl	80033c8 <_sbrk_r>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d1f2      	bne.n	8002c86 <sbrk_aligned+0x22>
 8002ca0:	e7ef      	b.n	8002c82 <sbrk_aligned+0x1e>
 8002ca2:	bf00      	nop
 8002ca4:	20000328 	.word	0x20000328

08002ca8 <_malloc_r>:
 8002ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cac:	1ccd      	adds	r5, r1, #3
 8002cae:	f025 0503 	bic.w	r5, r5, #3
 8002cb2:	3508      	adds	r5, #8
 8002cb4:	2d0c      	cmp	r5, #12
 8002cb6:	bf38      	it	cc
 8002cb8:	250c      	movcc	r5, #12
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	db01      	blt.n	8002cc4 <_malloc_r+0x1c>
 8002cc0:	42a9      	cmp	r1, r5
 8002cc2:	d904      	bls.n	8002cce <_malloc_r+0x26>
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	6033      	str	r3, [r6, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002da4 <_malloc_r+0xfc>
 8002cd2:	f000 f869 	bl	8002da8 <__malloc_lock>
 8002cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cda:	461c      	mov	r4, r3
 8002cdc:	bb44      	cbnz	r4, 8002d30 <_malloc_r+0x88>
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ffbf 	bl	8002c64 <sbrk_aligned>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	4604      	mov	r4, r0
 8002cea:	d158      	bne.n	8002d9e <_malloc_r+0xf6>
 8002cec:	f8d8 4000 	ldr.w	r4, [r8]
 8002cf0:	4627      	mov	r7, r4
 8002cf2:	2f00      	cmp	r7, #0
 8002cf4:	d143      	bne.n	8002d7e <_malloc_r+0xd6>
 8002cf6:	2c00      	cmp	r4, #0
 8002cf8:	d04b      	beq.n	8002d92 <_malloc_r+0xea>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	eb04 0903 	add.w	r9, r4, r3
 8002d04:	f000 fb60 	bl	80033c8 <_sbrk_r>
 8002d08:	4581      	cmp	r9, r0
 8002d0a:	d142      	bne.n	8002d92 <_malloc_r+0xea>
 8002d0c:	6821      	ldr	r1, [r4, #0]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	1a6d      	subs	r5, r5, r1
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7ff ffa6 	bl	8002c64 <sbrk_aligned>
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d03a      	beq.n	8002d92 <_malloc_r+0xea>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	442b      	add	r3, r5
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	f8d8 3000 	ldr.w	r3, [r8]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	bb62      	cbnz	r2, 8002d84 <_malloc_r+0xdc>
 8002d2a:	f8c8 7000 	str.w	r7, [r8]
 8002d2e:	e00f      	b.n	8002d50 <_malloc_r+0xa8>
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	1b52      	subs	r2, r2, r5
 8002d34:	d420      	bmi.n	8002d78 <_malloc_r+0xd0>
 8002d36:	2a0b      	cmp	r2, #11
 8002d38:	d917      	bls.n	8002d6a <_malloc_r+0xc2>
 8002d3a:	1961      	adds	r1, r4, r5
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	6025      	str	r5, [r4, #0]
 8002d40:	bf18      	it	ne
 8002d42:	6059      	strne	r1, [r3, #4]
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	bf08      	it	eq
 8002d48:	f8c8 1000 	streq.w	r1, [r8]
 8002d4c:	5162      	str	r2, [r4, r5]
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	4630      	mov	r0, r6
 8002d52:	f000 f82f 	bl	8002db4 <__malloc_unlock>
 8002d56:	f104 000b 	add.w	r0, r4, #11
 8002d5a:	1d23      	adds	r3, r4, #4
 8002d5c:	f020 0007 	bic.w	r0, r0, #7
 8002d60:	1ac2      	subs	r2, r0, r3
 8002d62:	bf1c      	itt	ne
 8002d64:	1a1b      	subne	r3, r3, r0
 8002d66:	50a3      	strne	r3, [r4, r2]
 8002d68:	e7af      	b.n	8002cca <_malloc_r+0x22>
 8002d6a:	6862      	ldr	r2, [r4, #4]
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	bf0c      	ite	eq
 8002d70:	f8c8 2000 	streq.w	r2, [r8]
 8002d74:	605a      	strne	r2, [r3, #4]
 8002d76:	e7eb      	b.n	8002d50 <_malloc_r+0xa8>
 8002d78:	4623      	mov	r3, r4
 8002d7a:	6864      	ldr	r4, [r4, #4]
 8002d7c:	e7ae      	b.n	8002cdc <_malloc_r+0x34>
 8002d7e:	463c      	mov	r4, r7
 8002d80:	687f      	ldr	r7, [r7, #4]
 8002d82:	e7b6      	b.n	8002cf2 <_malloc_r+0x4a>
 8002d84:	461a      	mov	r2, r3
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d1fb      	bne.n	8002d84 <_malloc_r+0xdc>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e7de      	b.n	8002d50 <_malloc_r+0xa8>
 8002d92:	230c      	movs	r3, #12
 8002d94:	4630      	mov	r0, r6
 8002d96:	6033      	str	r3, [r6, #0]
 8002d98:	f000 f80c 	bl	8002db4 <__malloc_unlock>
 8002d9c:	e794      	b.n	8002cc8 <_malloc_r+0x20>
 8002d9e:	6005      	str	r5, [r0, #0]
 8002da0:	e7d6      	b.n	8002d50 <_malloc_r+0xa8>
 8002da2:	bf00      	nop
 8002da4:	2000032c 	.word	0x2000032c

08002da8 <__malloc_lock>:
 8002da8:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <__malloc_lock+0x8>)
 8002daa:	f7ff bf11 	b.w	8002bd0 <__retarget_lock_acquire_recursive>
 8002dae:	bf00      	nop
 8002db0:	20000324 	.word	0x20000324

08002db4 <__malloc_unlock>:
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <__malloc_unlock+0x8>)
 8002db6:	f7ff bf0c 	b.w	8002bd2 <__retarget_lock_release_recursive>
 8002dba:	bf00      	nop
 8002dbc:	20000324 	.word	0x20000324

08002dc0 <__ssputs_r>:
 8002dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc4:	461f      	mov	r7, r3
 8002dc6:	688e      	ldr	r6, [r1, #8]
 8002dc8:	4682      	mov	sl, r0
 8002dca:	42be      	cmp	r6, r7
 8002dcc:	460c      	mov	r4, r1
 8002dce:	4690      	mov	r8, r2
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	d82d      	bhi.n	8002e30 <__ssputs_r+0x70>
 8002dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ddc:	d026      	beq.n	8002e2c <__ssputs_r+0x6c>
 8002dde:	6965      	ldr	r5, [r4, #20]
 8002de0:	6909      	ldr	r1, [r1, #16]
 8002de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002de6:	eba3 0901 	sub.w	r9, r3, r1
 8002dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dee:	1c7b      	adds	r3, r7, #1
 8002df0:	444b      	add	r3, r9
 8002df2:	106d      	asrs	r5, r5, #1
 8002df4:	429d      	cmp	r5, r3
 8002df6:	bf38      	it	cc
 8002df8:	461d      	movcc	r5, r3
 8002dfa:	0553      	lsls	r3, r2, #21
 8002dfc:	d527      	bpl.n	8002e4e <__ssputs_r+0x8e>
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7ff ff52 	bl	8002ca8 <_malloc_r>
 8002e04:	4606      	mov	r6, r0
 8002e06:	b360      	cbz	r0, 8002e62 <__ssputs_r+0xa2>
 8002e08:	464a      	mov	r2, r9
 8002e0a:	6921      	ldr	r1, [r4, #16]
 8002e0c:	f000 fafa 	bl	8003404 <memcpy>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e1a:	81a3      	strh	r3, [r4, #12]
 8002e1c:	6126      	str	r6, [r4, #16]
 8002e1e:	444e      	add	r6, r9
 8002e20:	6026      	str	r6, [r4, #0]
 8002e22:	463e      	mov	r6, r7
 8002e24:	6165      	str	r5, [r4, #20]
 8002e26:	eba5 0509 	sub.w	r5, r5, r9
 8002e2a:	60a5      	str	r5, [r4, #8]
 8002e2c:	42be      	cmp	r6, r7
 8002e2e:	d900      	bls.n	8002e32 <__ssputs_r+0x72>
 8002e30:	463e      	mov	r6, r7
 8002e32:	4632      	mov	r2, r6
 8002e34:	4641      	mov	r1, r8
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	f000 faac 	bl	8003394 <memmove>
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	68a3      	ldr	r3, [r4, #8]
 8002e40:	1b9b      	subs	r3, r3, r6
 8002e42:	60a3      	str	r3, [r4, #8]
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	4433      	add	r3, r6
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e4e:	462a      	mov	r2, r5
 8002e50:	f000 fae6 	bl	8003420 <_realloc_r>
 8002e54:	4606      	mov	r6, r0
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d1e0      	bne.n	8002e1c <__ssputs_r+0x5c>
 8002e5a:	4650      	mov	r0, sl
 8002e5c:	6921      	ldr	r1, [r4, #16]
 8002e5e:	f7ff feb9 	bl	8002bd4 <_free_r>
 8002e62:	230c      	movs	r3, #12
 8002e64:	f8ca 3000 	str.w	r3, [sl]
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e72:	81a3      	strh	r3, [r4, #12]
 8002e74:	e7e9      	b.n	8002e4a <__ssputs_r+0x8a>
	...

08002e78 <_svfiprintf_r>:
 8002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7c:	4698      	mov	r8, r3
 8002e7e:	898b      	ldrh	r3, [r1, #12]
 8002e80:	4607      	mov	r7, r0
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	460d      	mov	r5, r1
 8002e86:	4614      	mov	r4, r2
 8002e88:	b09d      	sub	sp, #116	@ 0x74
 8002e8a:	d510      	bpl.n	8002eae <_svfiprintf_r+0x36>
 8002e8c:	690b      	ldr	r3, [r1, #16]
 8002e8e:	b973      	cbnz	r3, 8002eae <_svfiprintf_r+0x36>
 8002e90:	2140      	movs	r1, #64	@ 0x40
 8002e92:	f7ff ff09 	bl	8002ca8 <_malloc_r>
 8002e96:	6028      	str	r0, [r5, #0]
 8002e98:	6128      	str	r0, [r5, #16]
 8002e9a:	b930      	cbnz	r0, 8002eaa <_svfiprintf_r+0x32>
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	b01d      	add	sp, #116	@ 0x74
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eaa:	2340      	movs	r3, #64	@ 0x40
 8002eac:	616b      	str	r3, [r5, #20]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002eb8:	2330      	movs	r3, #48	@ 0x30
 8002eba:	f04f 0901 	mov.w	r9, #1
 8002ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800305c <_svfiprintf_r+0x1e4>
 8002ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002eca:	4623      	mov	r3, r4
 8002ecc:	469a      	mov	sl, r3
 8002ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ed2:	b10a      	cbz	r2, 8002ed8 <_svfiprintf_r+0x60>
 8002ed4:	2a25      	cmp	r2, #37	@ 0x25
 8002ed6:	d1f9      	bne.n	8002ecc <_svfiprintf_r+0x54>
 8002ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8002edc:	d00b      	beq.n	8002ef6 <_svfiprintf_r+0x7e>
 8002ede:	465b      	mov	r3, fp
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	f7ff ff6b 	bl	8002dc0 <__ssputs_r>
 8002eea:	3001      	adds	r0, #1
 8002eec:	f000 80a7 	beq.w	800303e <_svfiprintf_r+0x1c6>
 8002ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ef2:	445a      	add	r2, fp
 8002ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 809f 	beq.w	800303e <_svfiprintf_r+0x1c6>
 8002f00:	2300      	movs	r3, #0
 8002f02:	f04f 32ff 	mov.w	r2, #4294967295
 8002f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f0a:	f10a 0a01 	add.w	sl, sl, #1
 8002f0e:	9304      	str	r3, [sp, #16]
 8002f10:	9307      	str	r3, [sp, #28]
 8002f12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f16:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f18:	4654      	mov	r4, sl
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f20:	484e      	ldr	r0, [pc, #312]	@ (800305c <_svfiprintf_r+0x1e4>)
 8002f22:	f000 fa61 	bl	80033e8 <memchr>
 8002f26:	9a04      	ldr	r2, [sp, #16]
 8002f28:	b9d8      	cbnz	r0, 8002f62 <_svfiprintf_r+0xea>
 8002f2a:	06d0      	lsls	r0, r2, #27
 8002f2c:	bf44      	itt	mi
 8002f2e:	2320      	movmi	r3, #32
 8002f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f34:	0711      	lsls	r1, r2, #28
 8002f36:	bf44      	itt	mi
 8002f38:	232b      	movmi	r3, #43	@ 0x2b
 8002f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f44:	d015      	beq.n	8002f72 <_svfiprintf_r+0xfa>
 8002f46:	4654      	mov	r4, sl
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f04f 0c0a 	mov.w	ip, #10
 8002f4e:	9a07      	ldr	r2, [sp, #28]
 8002f50:	4621      	mov	r1, r4
 8002f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f56:	3b30      	subs	r3, #48	@ 0x30
 8002f58:	2b09      	cmp	r3, #9
 8002f5a:	d94b      	bls.n	8002ff4 <_svfiprintf_r+0x17c>
 8002f5c:	b1b0      	cbz	r0, 8002f8c <_svfiprintf_r+0x114>
 8002f5e:	9207      	str	r2, [sp, #28]
 8002f60:	e014      	b.n	8002f8c <_svfiprintf_r+0x114>
 8002f62:	eba0 0308 	sub.w	r3, r0, r8
 8002f66:	fa09 f303 	lsl.w	r3, r9, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	46a2      	mov	sl, r4
 8002f6e:	9304      	str	r3, [sp, #16]
 8002f70:	e7d2      	b.n	8002f18 <_svfiprintf_r+0xa0>
 8002f72:	9b03      	ldr	r3, [sp, #12]
 8002f74:	1d19      	adds	r1, r3, #4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	9103      	str	r1, [sp, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfbb      	ittet	lt
 8002f7e:	425b      	neglt	r3, r3
 8002f80:	f042 0202 	orrlt.w	r2, r2, #2
 8002f84:	9307      	strge	r3, [sp, #28]
 8002f86:	9307      	strlt	r3, [sp, #28]
 8002f88:	bfb8      	it	lt
 8002f8a:	9204      	strlt	r2, [sp, #16]
 8002f8c:	7823      	ldrb	r3, [r4, #0]
 8002f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f90:	d10a      	bne.n	8002fa8 <_svfiprintf_r+0x130>
 8002f92:	7863      	ldrb	r3, [r4, #1]
 8002f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f96:	d132      	bne.n	8002ffe <_svfiprintf_r+0x186>
 8002f98:	9b03      	ldr	r3, [sp, #12]
 8002f9a:	3402      	adds	r4, #2
 8002f9c:	1d1a      	adds	r2, r3, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	9203      	str	r2, [sp, #12]
 8002fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fa6:	9305      	str	r3, [sp, #20]
 8002fa8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003060 <_svfiprintf_r+0x1e8>
 8002fac:	2203      	movs	r2, #3
 8002fae:	4650      	mov	r0, sl
 8002fb0:	7821      	ldrb	r1, [r4, #0]
 8002fb2:	f000 fa19 	bl	80033e8 <memchr>
 8002fb6:	b138      	cbz	r0, 8002fc8 <_svfiprintf_r+0x150>
 8002fb8:	2240      	movs	r2, #64	@ 0x40
 8002fba:	9b04      	ldr	r3, [sp, #16]
 8002fbc:	eba0 000a 	sub.w	r0, r0, sl
 8002fc0:	4082      	lsls	r2, r0
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	3401      	adds	r4, #1
 8002fc6:	9304      	str	r3, [sp, #16]
 8002fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fcc:	2206      	movs	r2, #6
 8002fce:	4825      	ldr	r0, [pc, #148]	@ (8003064 <_svfiprintf_r+0x1ec>)
 8002fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fd4:	f000 fa08 	bl	80033e8 <memchr>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d036      	beq.n	800304a <_svfiprintf_r+0x1d2>
 8002fdc:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <_svfiprintf_r+0x1f0>)
 8002fde:	bb1b      	cbnz	r3, 8003028 <_svfiprintf_r+0x1b0>
 8002fe0:	9b03      	ldr	r3, [sp, #12]
 8002fe2:	3307      	adds	r3, #7
 8002fe4:	f023 0307 	bic.w	r3, r3, #7
 8002fe8:	3308      	adds	r3, #8
 8002fea:	9303      	str	r3, [sp, #12]
 8002fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fee:	4433      	add	r3, r6
 8002ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ff2:	e76a      	b.n	8002eca <_svfiprintf_r+0x52>
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ffc:	e7a8      	b.n	8002f50 <_svfiprintf_r+0xd8>
 8002ffe:	2300      	movs	r3, #0
 8003000:	f04f 0c0a 	mov.w	ip, #10
 8003004:	4619      	mov	r1, r3
 8003006:	3401      	adds	r4, #1
 8003008:	9305      	str	r3, [sp, #20]
 800300a:	4620      	mov	r0, r4
 800300c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003010:	3a30      	subs	r2, #48	@ 0x30
 8003012:	2a09      	cmp	r2, #9
 8003014:	d903      	bls.n	800301e <_svfiprintf_r+0x1a6>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0c6      	beq.n	8002fa8 <_svfiprintf_r+0x130>
 800301a:	9105      	str	r1, [sp, #20]
 800301c:	e7c4      	b.n	8002fa8 <_svfiprintf_r+0x130>
 800301e:	4604      	mov	r4, r0
 8003020:	2301      	movs	r3, #1
 8003022:	fb0c 2101 	mla	r1, ip, r1, r2
 8003026:	e7f0      	b.n	800300a <_svfiprintf_r+0x192>
 8003028:	ab03      	add	r3, sp, #12
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	462a      	mov	r2, r5
 800302e:	4638      	mov	r0, r7
 8003030:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <_svfiprintf_r+0x1f4>)
 8003032:	a904      	add	r1, sp, #16
 8003034:	f3af 8000 	nop.w
 8003038:	1c42      	adds	r2, r0, #1
 800303a:	4606      	mov	r6, r0
 800303c:	d1d6      	bne.n	8002fec <_svfiprintf_r+0x174>
 800303e:	89ab      	ldrh	r3, [r5, #12]
 8003040:	065b      	lsls	r3, r3, #25
 8003042:	f53f af2d 	bmi.w	8002ea0 <_svfiprintf_r+0x28>
 8003046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003048:	e72c      	b.n	8002ea4 <_svfiprintf_r+0x2c>
 800304a:	ab03      	add	r3, sp, #12
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	462a      	mov	r2, r5
 8003050:	4638      	mov	r0, r7
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <_svfiprintf_r+0x1f4>)
 8003054:	a904      	add	r1, sp, #16
 8003056:	f000 f87d 	bl	8003154 <_printf_i>
 800305a:	e7ed      	b.n	8003038 <_svfiprintf_r+0x1c0>
 800305c:	080034fa 	.word	0x080034fa
 8003060:	08003500 	.word	0x08003500
 8003064:	08003504 	.word	0x08003504
 8003068:	00000000 	.word	0x00000000
 800306c:	08002dc1 	.word	0x08002dc1

08003070 <_printf_common>:
 8003070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003074:	4616      	mov	r6, r2
 8003076:	4698      	mov	r8, r3
 8003078:	688a      	ldr	r2, [r1, #8]
 800307a:	690b      	ldr	r3, [r1, #16]
 800307c:	4607      	mov	r7, r0
 800307e:	4293      	cmp	r3, r2
 8003080:	bfb8      	it	lt
 8003082:	4613      	movlt	r3, r2
 8003084:	6033      	str	r3, [r6, #0]
 8003086:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800308a:	460c      	mov	r4, r1
 800308c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003090:	b10a      	cbz	r2, 8003096 <_printf_common+0x26>
 8003092:	3301      	adds	r3, #1
 8003094:	6033      	str	r3, [r6, #0]
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	0699      	lsls	r1, r3, #26
 800309a:	bf42      	ittt	mi
 800309c:	6833      	ldrmi	r3, [r6, #0]
 800309e:	3302      	addmi	r3, #2
 80030a0:	6033      	strmi	r3, [r6, #0]
 80030a2:	6825      	ldr	r5, [r4, #0]
 80030a4:	f015 0506 	ands.w	r5, r5, #6
 80030a8:	d106      	bne.n	80030b8 <_printf_common+0x48>
 80030aa:	f104 0a19 	add.w	sl, r4, #25
 80030ae:	68e3      	ldr	r3, [r4, #12]
 80030b0:	6832      	ldr	r2, [r6, #0]
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	42ab      	cmp	r3, r5
 80030b6:	dc2b      	bgt.n	8003110 <_printf_common+0xa0>
 80030b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	3b00      	subs	r3, #0
 80030c0:	bf18      	it	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	0692      	lsls	r2, r2, #26
 80030c6:	d430      	bmi.n	800312a <_printf_common+0xba>
 80030c8:	4641      	mov	r1, r8
 80030ca:	4638      	mov	r0, r7
 80030cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030d0:	47c8      	blx	r9
 80030d2:	3001      	adds	r0, #1
 80030d4:	d023      	beq.n	800311e <_printf_common+0xae>
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	6922      	ldr	r2, [r4, #16]
 80030da:	f003 0306 	and.w	r3, r3, #6
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf14      	ite	ne
 80030e2:	2500      	movne	r5, #0
 80030e4:	6833      	ldreq	r3, [r6, #0]
 80030e6:	f04f 0600 	mov.w	r6, #0
 80030ea:	bf08      	it	eq
 80030ec:	68e5      	ldreq	r5, [r4, #12]
 80030ee:	f104 041a 	add.w	r4, r4, #26
 80030f2:	bf08      	it	eq
 80030f4:	1aed      	subeq	r5, r5, r3
 80030f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030fa:	bf08      	it	eq
 80030fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003100:	4293      	cmp	r3, r2
 8003102:	bfc4      	itt	gt
 8003104:	1a9b      	subgt	r3, r3, r2
 8003106:	18ed      	addgt	r5, r5, r3
 8003108:	42b5      	cmp	r5, r6
 800310a:	d11a      	bne.n	8003142 <_printf_common+0xd2>
 800310c:	2000      	movs	r0, #0
 800310e:	e008      	b.n	8003122 <_printf_common+0xb2>
 8003110:	2301      	movs	r3, #1
 8003112:	4652      	mov	r2, sl
 8003114:	4641      	mov	r1, r8
 8003116:	4638      	mov	r0, r7
 8003118:	47c8      	blx	r9
 800311a:	3001      	adds	r0, #1
 800311c:	d103      	bne.n	8003126 <_printf_common+0xb6>
 800311e:	f04f 30ff 	mov.w	r0, #4294967295
 8003122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003126:	3501      	adds	r5, #1
 8003128:	e7c1      	b.n	80030ae <_printf_common+0x3e>
 800312a:	2030      	movs	r0, #48	@ 0x30
 800312c:	18e1      	adds	r1, r4, r3
 800312e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003138:	4422      	add	r2, r4
 800313a:	3302      	adds	r3, #2
 800313c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003140:	e7c2      	b.n	80030c8 <_printf_common+0x58>
 8003142:	2301      	movs	r3, #1
 8003144:	4622      	mov	r2, r4
 8003146:	4641      	mov	r1, r8
 8003148:	4638      	mov	r0, r7
 800314a:	47c8      	blx	r9
 800314c:	3001      	adds	r0, #1
 800314e:	d0e6      	beq.n	800311e <_printf_common+0xae>
 8003150:	3601      	adds	r6, #1
 8003152:	e7d9      	b.n	8003108 <_printf_common+0x98>

08003154 <_printf_i>:
 8003154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	7e0f      	ldrb	r7, [r1, #24]
 800315a:	4691      	mov	r9, r2
 800315c:	2f78      	cmp	r7, #120	@ 0x78
 800315e:	4680      	mov	r8, r0
 8003160:	460c      	mov	r4, r1
 8003162:	469a      	mov	sl, r3
 8003164:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800316a:	d807      	bhi.n	800317c <_printf_i+0x28>
 800316c:	2f62      	cmp	r7, #98	@ 0x62
 800316e:	d80a      	bhi.n	8003186 <_printf_i+0x32>
 8003170:	2f00      	cmp	r7, #0
 8003172:	f000 80d3 	beq.w	800331c <_printf_i+0x1c8>
 8003176:	2f58      	cmp	r7, #88	@ 0x58
 8003178:	f000 80ba 	beq.w	80032f0 <_printf_i+0x19c>
 800317c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003184:	e03a      	b.n	80031fc <_printf_i+0xa8>
 8003186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800318a:	2b15      	cmp	r3, #21
 800318c:	d8f6      	bhi.n	800317c <_printf_i+0x28>
 800318e:	a101      	add	r1, pc, #4	@ (adr r1, 8003194 <_printf_i+0x40>)
 8003190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003194:	080031ed 	.word	0x080031ed
 8003198:	08003201 	.word	0x08003201
 800319c:	0800317d 	.word	0x0800317d
 80031a0:	0800317d 	.word	0x0800317d
 80031a4:	0800317d 	.word	0x0800317d
 80031a8:	0800317d 	.word	0x0800317d
 80031ac:	08003201 	.word	0x08003201
 80031b0:	0800317d 	.word	0x0800317d
 80031b4:	0800317d 	.word	0x0800317d
 80031b8:	0800317d 	.word	0x0800317d
 80031bc:	0800317d 	.word	0x0800317d
 80031c0:	08003303 	.word	0x08003303
 80031c4:	0800322b 	.word	0x0800322b
 80031c8:	080032bd 	.word	0x080032bd
 80031cc:	0800317d 	.word	0x0800317d
 80031d0:	0800317d 	.word	0x0800317d
 80031d4:	08003325 	.word	0x08003325
 80031d8:	0800317d 	.word	0x0800317d
 80031dc:	0800322b 	.word	0x0800322b
 80031e0:	0800317d 	.word	0x0800317d
 80031e4:	0800317d 	.word	0x0800317d
 80031e8:	080032c5 	.word	0x080032c5
 80031ec:	6833      	ldr	r3, [r6, #0]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6032      	str	r2, [r6, #0]
 80031f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09e      	b.n	800333e <_printf_i+0x1ea>
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	1d19      	adds	r1, r3, #4
 8003206:	6031      	str	r1, [r6, #0]
 8003208:	0606      	lsls	r6, r0, #24
 800320a:	d501      	bpl.n	8003210 <_printf_i+0xbc>
 800320c:	681d      	ldr	r5, [r3, #0]
 800320e:	e003      	b.n	8003218 <_printf_i+0xc4>
 8003210:	0645      	lsls	r5, r0, #25
 8003212:	d5fb      	bpl.n	800320c <_printf_i+0xb8>
 8003214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003218:	2d00      	cmp	r5, #0
 800321a:	da03      	bge.n	8003224 <_printf_i+0xd0>
 800321c:	232d      	movs	r3, #45	@ 0x2d
 800321e:	426d      	negs	r5, r5
 8003220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003224:	230a      	movs	r3, #10
 8003226:	4859      	ldr	r0, [pc, #356]	@ (800338c <_printf_i+0x238>)
 8003228:	e011      	b.n	800324e <_printf_i+0xfa>
 800322a:	6821      	ldr	r1, [r4, #0]
 800322c:	6833      	ldr	r3, [r6, #0]
 800322e:	0608      	lsls	r0, r1, #24
 8003230:	f853 5b04 	ldr.w	r5, [r3], #4
 8003234:	d402      	bmi.n	800323c <_printf_i+0xe8>
 8003236:	0649      	lsls	r1, r1, #25
 8003238:	bf48      	it	mi
 800323a:	b2ad      	uxthmi	r5, r5
 800323c:	2f6f      	cmp	r7, #111	@ 0x6f
 800323e:	6033      	str	r3, [r6, #0]
 8003240:	bf14      	ite	ne
 8003242:	230a      	movne	r3, #10
 8003244:	2308      	moveq	r3, #8
 8003246:	4851      	ldr	r0, [pc, #324]	@ (800338c <_printf_i+0x238>)
 8003248:	2100      	movs	r1, #0
 800324a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800324e:	6866      	ldr	r6, [r4, #4]
 8003250:	2e00      	cmp	r6, #0
 8003252:	bfa8      	it	ge
 8003254:	6821      	ldrge	r1, [r4, #0]
 8003256:	60a6      	str	r6, [r4, #8]
 8003258:	bfa4      	itt	ge
 800325a:	f021 0104 	bicge.w	r1, r1, #4
 800325e:	6021      	strge	r1, [r4, #0]
 8003260:	b90d      	cbnz	r5, 8003266 <_printf_i+0x112>
 8003262:	2e00      	cmp	r6, #0
 8003264:	d04b      	beq.n	80032fe <_printf_i+0x1aa>
 8003266:	4616      	mov	r6, r2
 8003268:	fbb5 f1f3 	udiv	r1, r5, r3
 800326c:	fb03 5711 	mls	r7, r3, r1, r5
 8003270:	5dc7      	ldrb	r7, [r0, r7]
 8003272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003276:	462f      	mov	r7, r5
 8003278:	42bb      	cmp	r3, r7
 800327a:	460d      	mov	r5, r1
 800327c:	d9f4      	bls.n	8003268 <_printf_i+0x114>
 800327e:	2b08      	cmp	r3, #8
 8003280:	d10b      	bne.n	800329a <_printf_i+0x146>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	07df      	lsls	r7, r3, #31
 8003286:	d508      	bpl.n	800329a <_printf_i+0x146>
 8003288:	6923      	ldr	r3, [r4, #16]
 800328a:	6861      	ldr	r1, [r4, #4]
 800328c:	4299      	cmp	r1, r3
 800328e:	bfde      	ittt	le
 8003290:	2330      	movle	r3, #48	@ 0x30
 8003292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003296:	f106 36ff 	addle.w	r6, r6, #4294967295
 800329a:	1b92      	subs	r2, r2, r6
 800329c:	6122      	str	r2, [r4, #16]
 800329e:	464b      	mov	r3, r9
 80032a0:	4621      	mov	r1, r4
 80032a2:	4640      	mov	r0, r8
 80032a4:	f8cd a000 	str.w	sl, [sp]
 80032a8:	aa03      	add	r2, sp, #12
 80032aa:	f7ff fee1 	bl	8003070 <_printf_common>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d14a      	bne.n	8003348 <_printf_i+0x1f4>
 80032b2:	f04f 30ff 	mov.w	r0, #4294967295
 80032b6:	b004      	add	sp, #16
 80032b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	2778      	movs	r7, #120	@ 0x78
 80032c6:	4832      	ldr	r0, [pc, #200]	@ (8003390 <_printf_i+0x23c>)
 80032c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	6831      	ldr	r1, [r6, #0]
 80032d0:	061f      	lsls	r7, r3, #24
 80032d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80032d6:	d402      	bmi.n	80032de <_printf_i+0x18a>
 80032d8:	065f      	lsls	r7, r3, #25
 80032da:	bf48      	it	mi
 80032dc:	b2ad      	uxthmi	r5, r5
 80032de:	6031      	str	r1, [r6, #0]
 80032e0:	07d9      	lsls	r1, r3, #31
 80032e2:	bf44      	itt	mi
 80032e4:	f043 0320 	orrmi.w	r3, r3, #32
 80032e8:	6023      	strmi	r3, [r4, #0]
 80032ea:	b11d      	cbz	r5, 80032f4 <_printf_i+0x1a0>
 80032ec:	2310      	movs	r3, #16
 80032ee:	e7ab      	b.n	8003248 <_printf_i+0xf4>
 80032f0:	4826      	ldr	r0, [pc, #152]	@ (800338c <_printf_i+0x238>)
 80032f2:	e7e9      	b.n	80032c8 <_printf_i+0x174>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	f023 0320 	bic.w	r3, r3, #32
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	e7f6      	b.n	80032ec <_printf_i+0x198>
 80032fe:	4616      	mov	r6, r2
 8003300:	e7bd      	b.n	800327e <_printf_i+0x12a>
 8003302:	6833      	ldr	r3, [r6, #0]
 8003304:	6825      	ldr	r5, [r4, #0]
 8003306:	1d18      	adds	r0, r3, #4
 8003308:	6961      	ldr	r1, [r4, #20]
 800330a:	6030      	str	r0, [r6, #0]
 800330c:	062e      	lsls	r6, r5, #24
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	d501      	bpl.n	8003316 <_printf_i+0x1c2>
 8003312:	6019      	str	r1, [r3, #0]
 8003314:	e002      	b.n	800331c <_printf_i+0x1c8>
 8003316:	0668      	lsls	r0, r5, #25
 8003318:	d5fb      	bpl.n	8003312 <_printf_i+0x1be>
 800331a:	8019      	strh	r1, [r3, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	4616      	mov	r6, r2
 8003320:	6123      	str	r3, [r4, #16]
 8003322:	e7bc      	b.n	800329e <_printf_i+0x14a>
 8003324:	6833      	ldr	r3, [r6, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	1d1a      	adds	r2, r3, #4
 800332a:	6032      	str	r2, [r6, #0]
 800332c:	681e      	ldr	r6, [r3, #0]
 800332e:	6862      	ldr	r2, [r4, #4]
 8003330:	4630      	mov	r0, r6
 8003332:	f000 f859 	bl	80033e8 <memchr>
 8003336:	b108      	cbz	r0, 800333c <_printf_i+0x1e8>
 8003338:	1b80      	subs	r0, r0, r6
 800333a:	6060      	str	r0, [r4, #4]
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	6123      	str	r3, [r4, #16]
 8003340:	2300      	movs	r3, #0
 8003342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003346:	e7aa      	b.n	800329e <_printf_i+0x14a>
 8003348:	4632      	mov	r2, r6
 800334a:	4649      	mov	r1, r9
 800334c:	4640      	mov	r0, r8
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	47d0      	blx	sl
 8003352:	3001      	adds	r0, #1
 8003354:	d0ad      	beq.n	80032b2 <_printf_i+0x15e>
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	079b      	lsls	r3, r3, #30
 800335a:	d413      	bmi.n	8003384 <_printf_i+0x230>
 800335c:	68e0      	ldr	r0, [r4, #12]
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	4298      	cmp	r0, r3
 8003362:	bfb8      	it	lt
 8003364:	4618      	movlt	r0, r3
 8003366:	e7a6      	b.n	80032b6 <_printf_i+0x162>
 8003368:	2301      	movs	r3, #1
 800336a:	4632      	mov	r2, r6
 800336c:	4649      	mov	r1, r9
 800336e:	4640      	mov	r0, r8
 8003370:	47d0      	blx	sl
 8003372:	3001      	adds	r0, #1
 8003374:	d09d      	beq.n	80032b2 <_printf_i+0x15e>
 8003376:	3501      	adds	r5, #1
 8003378:	68e3      	ldr	r3, [r4, #12]
 800337a:	9903      	ldr	r1, [sp, #12]
 800337c:	1a5b      	subs	r3, r3, r1
 800337e:	42ab      	cmp	r3, r5
 8003380:	dcf2      	bgt.n	8003368 <_printf_i+0x214>
 8003382:	e7eb      	b.n	800335c <_printf_i+0x208>
 8003384:	2500      	movs	r5, #0
 8003386:	f104 0619 	add.w	r6, r4, #25
 800338a:	e7f5      	b.n	8003378 <_printf_i+0x224>
 800338c:	0800350b 	.word	0x0800350b
 8003390:	0800351c 	.word	0x0800351c

08003394 <memmove>:
 8003394:	4288      	cmp	r0, r1
 8003396:	b510      	push	{r4, lr}
 8003398:	eb01 0402 	add.w	r4, r1, r2
 800339c:	d902      	bls.n	80033a4 <memmove+0x10>
 800339e:	4284      	cmp	r4, r0
 80033a0:	4623      	mov	r3, r4
 80033a2:	d807      	bhi.n	80033b4 <memmove+0x20>
 80033a4:	1e43      	subs	r3, r0, #1
 80033a6:	42a1      	cmp	r1, r4
 80033a8:	d008      	beq.n	80033bc <memmove+0x28>
 80033aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033b2:	e7f8      	b.n	80033a6 <memmove+0x12>
 80033b4:	4601      	mov	r1, r0
 80033b6:	4402      	add	r2, r0
 80033b8:	428a      	cmp	r2, r1
 80033ba:	d100      	bne.n	80033be <memmove+0x2a>
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033c6:	e7f7      	b.n	80033b8 <memmove+0x24>

080033c8 <_sbrk_r>:
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	2300      	movs	r3, #0
 80033cc:	4d05      	ldr	r5, [pc, #20]	@ (80033e4 <_sbrk_r+0x1c>)
 80033ce:	4604      	mov	r4, r0
 80033d0:	4608      	mov	r0, r1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	f7fd ffa4 	bl	8001320 <_sbrk>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d102      	bne.n	80033e2 <_sbrk_r+0x1a>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	b103      	cbz	r3, 80033e2 <_sbrk_r+0x1a>
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	20000320 	.word	0x20000320

080033e8 <memchr>:
 80033e8:	4603      	mov	r3, r0
 80033ea:	b510      	push	{r4, lr}
 80033ec:	b2c9      	uxtb	r1, r1
 80033ee:	4402      	add	r2, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	d101      	bne.n	80033fa <memchr+0x12>
 80033f6:	2000      	movs	r0, #0
 80033f8:	e003      	b.n	8003402 <memchr+0x1a>
 80033fa:	7804      	ldrb	r4, [r0, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	428c      	cmp	r4, r1
 8003400:	d1f6      	bne.n	80033f0 <memchr+0x8>
 8003402:	bd10      	pop	{r4, pc}

08003404 <memcpy>:
 8003404:	440a      	add	r2, r1
 8003406:	4291      	cmp	r1, r2
 8003408:	f100 33ff 	add.w	r3, r0, #4294967295
 800340c:	d100      	bne.n	8003410 <memcpy+0xc>
 800340e:	4770      	bx	lr
 8003410:	b510      	push	{r4, lr}
 8003412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003416:	4291      	cmp	r1, r2
 8003418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800341c:	d1f9      	bne.n	8003412 <memcpy+0xe>
 800341e:	bd10      	pop	{r4, pc}

08003420 <_realloc_r>:
 8003420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003424:	4680      	mov	r8, r0
 8003426:	4615      	mov	r5, r2
 8003428:	460c      	mov	r4, r1
 800342a:	b921      	cbnz	r1, 8003436 <_realloc_r+0x16>
 800342c:	4611      	mov	r1, r2
 800342e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003432:	f7ff bc39 	b.w	8002ca8 <_malloc_r>
 8003436:	b92a      	cbnz	r2, 8003444 <_realloc_r+0x24>
 8003438:	f7ff fbcc 	bl	8002bd4 <_free_r>
 800343c:	2400      	movs	r4, #0
 800343e:	4620      	mov	r0, r4
 8003440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003444:	f000 f81a 	bl	800347c <_malloc_usable_size_r>
 8003448:	4285      	cmp	r5, r0
 800344a:	4606      	mov	r6, r0
 800344c:	d802      	bhi.n	8003454 <_realloc_r+0x34>
 800344e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003452:	d8f4      	bhi.n	800343e <_realloc_r+0x1e>
 8003454:	4629      	mov	r1, r5
 8003456:	4640      	mov	r0, r8
 8003458:	f7ff fc26 	bl	8002ca8 <_malloc_r>
 800345c:	4607      	mov	r7, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	d0ec      	beq.n	800343c <_realloc_r+0x1c>
 8003462:	42b5      	cmp	r5, r6
 8003464:	462a      	mov	r2, r5
 8003466:	4621      	mov	r1, r4
 8003468:	bf28      	it	cs
 800346a:	4632      	movcs	r2, r6
 800346c:	f7ff ffca 	bl	8003404 <memcpy>
 8003470:	4621      	mov	r1, r4
 8003472:	4640      	mov	r0, r8
 8003474:	f7ff fbae 	bl	8002bd4 <_free_r>
 8003478:	463c      	mov	r4, r7
 800347a:	e7e0      	b.n	800343e <_realloc_r+0x1e>

0800347c <_malloc_usable_size_r>:
 800347c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003480:	1f18      	subs	r0, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	bfbc      	itt	lt
 8003486:	580b      	ldrlt	r3, [r1, r0]
 8003488:	18c0      	addlt	r0, r0, r3
 800348a:	4770      	bx	lr

0800348c <_init>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr

08003498 <_fini>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	bf00      	nop
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr
