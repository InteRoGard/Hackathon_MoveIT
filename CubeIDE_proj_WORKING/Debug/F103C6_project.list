
F103C6_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003428  08003428  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003428  08003428  00004428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003430  08003430  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003434  08003434  00004434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003438  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  080034a8  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080034a8  00005330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf0b  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd5  00000000  00000000  00010fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00012c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e3  00000000  00000000  000137e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001755c  00000000  00000000  000140c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e811  00000000  00000000  0002b61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008438b  00000000  00000000  00039e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be1bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034c4  00000000  00000000  000be200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c16c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003388 	.word	0x08003388

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003388 	.word	0x08003388

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
  uint8_t checksum = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  while (length--)
 800053c:	e022      	b.n	8000584 <CalculateChecksum+0x58>
  {
    uint8_t currentByte = *data++;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 8; i; i--)
 8000548:	2308      	movs	r3, #8
 800054a:	737b      	strb	r3, [r7, #13]
 800054c:	e017      	b.n	800057e <CalculateChecksum+0x52>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	4053      	eors	r3, r2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	733b      	strb	r3, [r7, #12]
      checksum >>= 1;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	085b      	lsrs	r3, r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]

      if (temp)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <CalculateChecksum+0x46>
      {
        checksum ^= 0x8C;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800056e:	43db      	mvns	r3, r3
 8000570:	73fb      	strb	r3, [r7, #15]
      }

      currentByte >>= 1;
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	085b      	lsrs	r3, r3, #1
 8000576:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 8; i; i--)
 8000578:	7b7b      	ldrb	r3, [r7, #13]
 800057a:	3b01      	subs	r3, #1
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	7b7b      	ldrb	r3, [r7, #13]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1e4      	bne.n	800054e <CalculateChecksum+0x22>
  while (length--)
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	70fa      	strb	r2, [r7, #3]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1d7      	bne.n	800053e <CalculateChecksum+0x12>
    }
  }

  return checksum;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b087      	sub	sp, #28
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	785b      	ldrb	r3, [r3, #1]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <ExecuteCommand+0x18>
  {
    return DS18B20_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e044      	b.n	800063c <ExecuteCommand+0xa2>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	7a3a      	ldrb	r2, [r7, #8]
 80005b8:	4611      	mov	r1, r2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fa9e 	bl	8000afc <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 80005c0:	7a7b      	ldrb	r3, [r7, #9]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d026      	beq.n	8000614 <ExecuteCommand+0x7a>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	75fb      	strb	r3, [r7, #23]
 80005ca:	e00c      	b.n	80005e6 <ExecuteCommand+0x4c>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6858      	ldr	r0, [r3, #4]
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	18d4      	adds	r4, r2, r3
 80005d6:	21ff      	movs	r1, #255	@ 0xff
 80005d8:	f000 fa90 	bl	8000afc <OneWire_ProcessByte>
 80005dc:	4603      	mov	r3, r0
 80005de:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	3301      	adds	r3, #1
 80005e4:	75fb      	strb	r3, [r7, #23]
 80005e6:	7a7b      	ldrb	r3, [r7, #9]
 80005e8:	7dfa      	ldrb	r2, [r7, #23]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d3ee      	bcc.n	80005cc <ExecuteCommand+0x32>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 80005ee:	7a7b      	ldrb	r3, [r7, #9]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff ff98 	bl	800052c <CalculateChecksum>
 80005fc:	4603      	mov	r3, r0
 80005fe:	757b      	strb	r3, [r7, #21]
    if (checkSum != data[command.rxBytesNum - 1])
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	3b01      	subs	r3, #1
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	7d7a      	ldrb	r2, [r7, #21]
 800060c:	429a      	cmp	r2, r3
 800060e:	d014      	beq.n	800063a <ExecuteCommand+0xa0>
    {
      return DS18B20_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	e013      	b.n	800063c <ExecuteCommand+0xa2>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	75bb      	strb	r3, [r7, #22]
 8000618:	e00b      	b.n	8000632 <ExecuteCommand+0x98>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6858      	ldr	r0, [r3, #4]
 800061e:	7dbb      	ldrb	r3, [r7, #22]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	f000 fa68 	bl	8000afc <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 800062c:	7dbb      	ldrb	r3, [r7, #22]
 800062e:	3301      	adds	r3, #1
 8000630:	75bb      	strb	r3, [r7, #22]
 8000632:	7abb      	ldrb	r3, [r7, #10]
 8000634:	7dba      	ldrb	r2, [r7, #22]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3ef      	bcc.n	800061a <ExecuteCommand+0x80>
    }
  }

  return DS18B20_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd90      	pop	{r4, r7, pc}

08000644 <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fa30 	bl	8000ab8 <OneWire_ProcessBit>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 800065c:	e007      	b.n	800066e <WaitForConversionFinished+0x2a>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fa27 	bl	8000ab8 <OneWire_ProcessBit>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]
  while(data != 0xFF)
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2bff      	cmp	r3, #255	@ 0xff
 8000672:	d1f4      	bne.n	800065e <WaitForConversionFinished+0x1a>
  }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 800068c:	f107 030a 	add.w	r3, r7, #10
 8000690:	491c      	ldr	r1, [pc, #112]	@ (8000704 <DS18B20_ConvertT+0x84>)
 8000692:	461a      	mov	r2, r3
 8000694:	6809      	ldr	r1, [r1, #0]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff7f 	bl	800059a <ExecuteCommand>
 800069c:	4603      	mov	r3, r0
 800069e:	72fb      	strb	r3, [r7, #11]

  if (waitCondition == DS18B20_DATA)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d102      	bne.n	80006ac <DS18B20_ConvertT+0x2c>
  {
    WaitForConversionFinished(sensor);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ffcc 	bl	8000644 <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d123      	bne.n	80006fa <DS18B20_ConvertT+0x7a>
  {
    uint32_t delayValueMs = 1000;
 80006b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b6:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7c1b      	ldrb	r3, [r3, #16]
 80006bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80006be:	d014      	beq.n	80006ea <DS18B20_ConvertT+0x6a>
 80006c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80006c2:	dc16      	bgt.n	80006f2 <DS18B20_ConvertT+0x72>
 80006c4:	2b5f      	cmp	r3, #95	@ 0x5f
 80006c6:	d00c      	beq.n	80006e2 <DS18B20_ConvertT+0x62>
 80006c8:	2b5f      	cmp	r3, #95	@ 0x5f
 80006ca:	dc12      	bgt.n	80006f2 <DS18B20_ConvertT+0x72>
 80006cc:	2b1f      	cmp	r3, #31
 80006ce:	d002      	beq.n	80006d6 <DS18B20_ConvertT+0x56>
 80006d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006d2:	d003      	beq.n	80006dc <DS18B20_ConvertT+0x5c>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 80006d4:	e00d      	b.n	80006f2 <DS18B20_ConvertT+0x72>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 80006d6:	235e      	movs	r3, #94	@ 0x5e
 80006d8:	60fb      	str	r3, [r7, #12]
        break;
 80006da:	e00b      	b.n	80006f4 <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 80006dc:	23bc      	movs	r3, #188	@ 0xbc
 80006de:	60fb      	str	r3, [r7, #12]
        break;
 80006e0:	e008      	b.n	80006f4 <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 80006e2:	f240 1377 	movw	r3, #375	@ 0x177
 80006e6:	60fb      	str	r3, [r7, #12]
        break;
 80006e8:	e004      	b.n	80006f4 <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 80006ea:	f240 23ee 	movw	r3, #750	@ 0x2ee
 80006ee:	60fb      	str	r3, [r7, #12]
        break;
 80006f0:	e000      	b.n	80006f4 <DS18B20_ConvertT+0x74>
        break;
 80006f2:	bf00      	nop
    }

    HAL_Delay(delayValueMs);
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 fe55 	bl	80013a4 <HAL_Delay>
  }

  return result;
 80006fa:	7afb      	ldrb	r3, [r7, #11]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000010 	.word	0x20000010

08000708 <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4938      	ldr	r1, [pc, #224]	@ (80007f8 <DS18B20_ReadScratchpad+0xf0>)
 8000716:	461a      	mov	r2, r3
 8000718:	6809      	ldr	r1, [r1, #0]
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff3d 	bl	800059a <ExecuteCommand>
 8000720:	4603      	mov	r3, r0
 8000722:	757b      	strb	r3, [r7, #21]

  if (result != DS18B20_OK)
 8000724:	7d7b      	ldrb	r3, [r7, #21]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <DS18B20_ReadScratchpad+0x26>
  {
    return result;
 800072a:	7d7b      	ldrb	r3, [r7, #21]
 800072c:	e060      	b.n	80007f0 <DS18B20_ReadScratchpad+0xe8>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 800072e:	7aba      	ldrb	r2, [r7, #10]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 8000734:	7afa      	ldrb	r2, [r7, #11]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 800073a:	7b3a      	ldrb	r2, [r7, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8000740:	7a7b      	ldrb	r3, [r7, #9]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	b21a      	sxth	r2, r3
 8000746:	7a3b      	ldrb	r3, [r7, #8]
 8000748:	b21b      	sxth	r3, r3
 800074a:	4313      	orrs	r3, r2
 800074c:	b21b      	sxth	r3, r3
 800074e:	82fb      	strh	r3, [r7, #22]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 8000750:	8afb      	ldrh	r3, [r7, #22]
 8000752:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000756:	f023 0307 	bic.w	r3, r3, #7
 800075a:	827b      	strh	r3, [r7, #18]

  if (sign != 0)
 800075c:	8a7b      	ldrh	r3, [r7, #18]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <DS18B20_ReadScratchpad+0x60>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 8000762:	8afb      	ldrh	r3, [r7, #22]
 8000764:	425b      	negs	r3, r3
 8000766:	82fb      	strh	r3, [r7, #22]
  }

  switch (sensor->configRegister)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7c1b      	ldrb	r3, [r3, #16]
 800076c:	2b7f      	cmp	r3, #127	@ 0x7f
 800076e:	d01d      	beq.n	80007ac <DS18B20_ReadScratchpad+0xa4>
 8000770:	2b7f      	cmp	r3, #127	@ 0x7f
 8000772:	dc20      	bgt.n	80007b6 <DS18B20_ReadScratchpad+0xae>
 8000774:	2b5f      	cmp	r3, #95	@ 0x5f
 8000776:	d012      	beq.n	800079e <DS18B20_ReadScratchpad+0x96>
 8000778:	2b5f      	cmp	r3, #95	@ 0x5f
 800077a:	dc1c      	bgt.n	80007b6 <DS18B20_ReadScratchpad+0xae>
 800077c:	2b1f      	cmp	r3, #31
 800077e:	d002      	beq.n	8000786 <DS18B20_ReadScratchpad+0x7e>
 8000780:	2b3f      	cmp	r3, #63	@ 0x3f
 8000782:	d005      	beq.n	8000790 <DS18B20_ReadScratchpad+0x88>
 8000784:	e017      	b.n	80007b6 <DS18B20_ReadScratchpad+0xae>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 8000786:	8afb      	ldrh	r3, [r7, #22]
 8000788:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800078c:	82fb      	strh	r3, [r7, #22]
      break;
 800078e:	e017      	b.n	80007c0 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 8000790:	8afb      	ldrh	r3, [r7, #22]
 8000792:	f023 0303 	bic.w	r3, r3, #3
 8000796:	055b      	lsls	r3, r3, #21
 8000798:	0d5b      	lsrs	r3, r3, #21
 800079a:	82fb      	strh	r3, [r7, #22]
      break;
 800079c:	e010      	b.n	80007c0 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 800079e:	8afb      	ldrh	r3, [r7, #22]
 80007a0:	f023 0301 	bic.w	r3, r3, #1
 80007a4:	055b      	lsls	r3, r3, #21
 80007a6:	0d5b      	lsrs	r3, r3, #21
 80007a8:	82fb      	strh	r3, [r7, #22]
      break;
 80007aa:	e009      	b.n	80007c0 <DS18B20_ReadScratchpad+0xb8>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 80007ac:	8afb      	ldrh	r3, [r7, #22]
 80007ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007b2:	82fb      	strh	r3, [r7, #22]
      break;
 80007b4:	e004      	b.n	80007c0 <DS18B20_ReadScratchpad+0xb8>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 80007b6:	8afb      	ldrh	r3, [r7, #22]
 80007b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007bc:	82fb      	strh	r3, [r7, #22]
      break;
 80007be:	bf00      	nop
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 80007c0:	8afb      	ldrh	r3, [r7, #22]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe34 	bl	8000430 <__aeabi_ui2f>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcc4 	bl	800015c <__aeabi_fmul>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 80007dc:	8a7b      	ldrh	r3, [r7, #18]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <DS18B20_ReadScratchpad+0xe6>
  {
    sensor->temperature *= (-1);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000008 	.word	0x20000008

080007fc <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <DS18B20_WriteScratchpad+0x48>)
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fec4 	bl	800059a <ExecuteCommand>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <DS18B20_WriteScratchpad+0x24>
  {
    return result;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	e00c      	b.n	800083a <DS18B20_WriteScratchpad+0x3e>
  }

  sensor->temperatureLimitHigh = data[0];
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = data[1];
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	785a      	ldrb	r2, [r3, #1]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = data[2];
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789a      	ldrb	r2, [r3, #2]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	741a      	strb	r2, [r3, #16]

  return result;
 8000838:	7bfb      	ldrb	r3, [r7, #15]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000000c 	.word	0x2000000c

08000848 <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e012      	b.n	8000882 <DS18B20_InitializationCommand+0x3a>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f981 	bl	8000b68 <OneWire_Reset>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]

  if (status == ONEWIRE_OK)
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d104      	bne.n	800087a <DS18B20_InitializationCommand+0x32>
  {
    sensor->isConnected = 1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e003      	b.n	8000882 <DS18B20_InitializationCommand+0x3a>
  }
  else
  {
    sensor->isConnected = 0;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 8000880:	2301      	movs	r3, #1
  }
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4912      	ldr	r1, [pc, #72]	@ (80008e4 <DS18B20_ReadRom+0x58>)
 800089a:	461a      	mov	r2, r3
 800089c:	6809      	ldr	r1, [r1, #0]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fe7b 	bl	800059a <ExecuteCommand>
 80008a4:	4603      	mov	r3, r0
 80008a6:	75bb      	strb	r3, [r7, #22]

  if (result != DS18B20_OK)
 80008a8:	7dbb      	ldrb	r3, [r7, #22]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <DS18B20_ReadRom+0x26>
  {
    return result;
 80008ae:	7dbb      	ldrb	r3, [r7, #22]
 80008b0:	e014      	b.n	80008dc <DS18B20_ReadRom+0x50>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	75fb      	strb	r3, [r7, #23]
 80008b6:	e00d      	b.n	80008d4 <DS18B20_ReadRom+0x48>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	3218      	adds	r2, #24
 80008c0:	443a      	add	r2, r7
 80008c2:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	460a      	mov	r2, r1
 80008cc:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 80008ce:	7dfb      	ldrb	r3, [r7, #23]
 80008d0:	3301      	adds	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	d9ee      	bls.n	80008b8 <DS18B20_ReadRom+0x2c>
  }

  return DS18B20_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000

080008e8 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 80008f0:	f107 030e 	add.w	r3, r7, #14
 80008f4:	4908      	ldr	r1, [pc, #32]	@ (8000918 <DS18B20_SkipRom+0x30>)
 80008f6:	461a      	mov	r2, r3
 80008f8:	6809      	ldr	r1, [r1, #0]
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fe4d 	bl	800059a <ExecuteCommand>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]

  if (result != DS18B20_OK)
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <DS18B20_SkipRom+0x26>
  {
    return result;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	e000      	b.n	8000910 <DS18B20_SkipRom+0x28>
  }

  return DS18B20_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000004 	.word	0x20000004

0800091c <DS18B20_Init>:



/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t pclk = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  huart->Init.BaudRate = baudrate;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	605a      	str	r2, [r3, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a54      	ldr	r2, [pc, #336]	@ (8000ab0 <SetBaudrate+0x16c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d103      	bne.n	800096a <SetBaudrate+0x26>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000962:	f001 fcdd 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	e002      	b.n	8000970 <SetBaudrate+0x2c>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800096a:	f001 fcc5 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 800096e:	60f8      	str	r0, [r7, #12]
    }

  if (huart->Init.OverSampling == UART_OVERSAMPLING_16)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d14c      	bne.n	8000a12 <SetBaudrate+0xce>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	009a      	lsls	r2, r3, #2
 8000982:	441a      	add	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4a49      	ldr	r2, [pc, #292]	@ (8000ab4 <SetBaudrate+0x170>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	0119      	lsls	r1, r3, #4
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009a      	lsls	r2, r3, #2
 80009a2:	441a      	add	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80009ae:	4b41      	ldr	r3, [pc, #260]	@ (8000ab4 <SetBaudrate+0x170>)
 80009b0:	fba3 0302 	umull	r0, r3, r3, r2
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	2064      	movs	r0, #100	@ 0x64
 80009b8:	fb00 f303 	mul.w	r3, r0, r3
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	3332      	adds	r3, #50	@ 0x32
 80009c2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab4 <SetBaudrate+0x170>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	095b      	lsrs	r3, r3, #5
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80009d0:	4419      	add	r1, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	009a      	lsls	r2, r3, #2
 80009dc:	441a      	add	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80009e8:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <SetBaudrate+0x170>)
 80009ea:	fba3 0302 	umull	r0, r3, r3, r2
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2064      	movs	r0, #100	@ 0x64
 80009f2:	fb00 f303 	mul.w	r3, r0, r3
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	3332      	adds	r3, #50	@ 0x32
 80009fc:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab4 <SetBaudrate+0x170>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	f003 0207 	and.w	r2, r3, #7
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	440a      	add	r2, r1
 8000a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000a10:	e04a      	b.n	8000aa8 <SetBaudrate+0x164>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	009a      	lsls	r2, r3, #2
 8000a1c:	441a      	add	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a28:	4a22      	ldr	r2, [pc, #136]	@ (8000ab4 <SetBaudrate+0x170>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	0119      	lsls	r1, r3, #4
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	009a      	lsls	r2, r3, #2
 8000a3c:	441a      	add	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <SetBaudrate+0x170>)
 8000a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2064      	movs	r0, #100	@ 0x64
 8000a52:	fb00 f303 	mul.w	r3, r0, r3
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	3332      	adds	r3, #50	@ 0x32
 8000a5c:	4a15      	ldr	r2, [pc, #84]	@ (8000ab4 <SetBaudrate+0x170>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000a68:	4419      	add	r1, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	009a      	lsls	r2, r3, #2
 8000a74:	441a      	add	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <SetBaudrate+0x170>)
 8000a82:	fba3 0302 	umull	r0, r3, r3, r2
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	fb00 f303 	mul.w	r3, r0, r3
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	3332      	adds	r3, #50	@ 0x32
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <SetBaudrate+0x170>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	f003 020f 	and.w	r2, r3, #15
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	440a      	add	r2, r1
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	51eb851f 	.word	0x51eb851f

08000ab8 <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
  uint8_t txData = 0xFF;
 8000ac4:	23ff      	movs	r3, #255	@ 0xff
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint8_t rxData = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]

  if (bit == 0)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <OneWire_ProcessBit+0x1e>
  {
    txData = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 8000ad6:	f107 010f 	add.w	r1, r7, #15
 8000ada:	230a      	movs	r3, #10
 8000adc:	2201      	movs	r2, #1
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f001 fd7c 	bl	80025dc <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 8000ae4:	f107 010e 	add.w	r1, r7, #14
 8000ae8:	230a      	movs	r3, #10
 8000aea:	2201      	movs	r2, #1
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f001 fdf8 	bl	80026e2 <HAL_UART_Receive>

  return rxData;
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
  uint8_t rxByte = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73bb      	strb	r3, [r7, #14]
 8000b10:	e022      	b.n	8000b58 <OneWire_ProcessByte+0x5c>
  {
    uint8_t txBit = (byte >> i) & 0x01;
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	733b      	strb	r3, [r7, #12]
    uint8_t rxBit = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	737b      	strb	r3, [r7, #13]

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 8000b26:	7b3b      	ldrb	r3, [r7, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffc4 	bl	8000ab8 <OneWire_ProcessBit>
 8000b30:	4603      	mov	r3, r0
 8000b32:	72fb      	strb	r3, [r7, #11]

    if (tempRxData == 0xFF)
 8000b34:	7afb      	ldrb	r3, [r7, #11]
 8000b36:	2bff      	cmp	r3, #255	@ 0xff
 8000b38:	d101      	bne.n	8000b3e <OneWire_ProcessByte+0x42>
    {
      rxBit = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	737b      	strb	r3, [r7, #13]
    }

    rxByte |= (rxBit << i);
 8000b3e:	7b7a      	ldrb	r2, [r7, #13]
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	b25a      	sxtb	r2, r3
 8000b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 8000b52:	7bbb      	ldrb	r3, [r7, #14]
 8000b54:	3301      	adds	r3, #1
 8000b56:	73bb      	strb	r3, [r7, #14]
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9d9      	bls.n	8000b12 <OneWire_ProcessByte+0x16>
  }

  return rxByte;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  ONEWIRE_Status status = ONEWIRE_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 8000b74:	23f0      	movs	r3, #240	@ 0xf0
 8000b76:	73bb      	strb	r3, [r7, #14]
  uint8_t rxByte = 0x00;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	737b      	strb	r3, [r7, #13]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 8000b7c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fedf 	bl	8000944 <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 8000b86:	f107 010e 	add.w	r1, r7, #14
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f001 fd24 	bl	80025dc <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 8000b94:	f107 010d 	add.w	r1, r7, #13
 8000b98:	230a      	movs	r3, #10
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 fda0 	bl	80026e2 <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8000ba2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fecc 	bl	8000944 <SetBaudrate>

  if (rxByte == txByte)
 8000bac:	7b7a      	ldrb	r2, [r7, #13]
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d101      	bne.n	8000bb8 <OneWire_Reset+0x50>
  {
    status = ONEWIRE_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	b096      	sub	sp, #88	@ 0x58
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const uint8_t hello[] = "Comitas Akademya\r\n";
 8000bca:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <main+0xe4>)
 8000bcc:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	8022      	strh	r2, [r4, #0]
 8000bdc:	3402      	adds	r4, #2
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fb7d 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f869 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f000 f95b 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bee:	f000 f905 	bl	8000dfc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000bf2:	f000 f89f 	bl	8000d34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bf6:	f000 f8cb 	bl	8000d90 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000bfa:	f000 f929 	bl	8000e50 <MX_USART2_UART_Init>
  DS18B20_Init(&temperatureSensor, &huart2);
 8000bfe:	492b      	ldr	r1, [pc, #172]	@ (8000cac <main+0xe8>)
 8000c00:	482b      	ldr	r0, [pc, #172]	@ (8000cb0 <main+0xec>)
 8000c02:	f7ff fe8b 	bl	800091c <DS18B20_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_InitializationCommand(&temperatureSensor);
 8000c06:	482a      	ldr	r0, [pc, #168]	@ (8000cb0 <main+0xec>)
 8000c08:	f7ff fe1e 	bl	8000848 <DS18B20_InitializationCommand>
  DS18B20_ReadRom(&temperatureSensor);
 8000c0c:	4828      	ldr	r0, [pc, #160]	@ (8000cb0 <main+0xec>)
 8000c0e:	f7ff fe3d 	bl	800088c <DS18B20_ReadRom>
  DS18B20_ReadScratchpad(&temperatureSensor);
 8000c12:	4827      	ldr	r0, [pc, #156]	@ (8000cb0 <main+0xec>)
 8000c14:	f7ff fd78 	bl	8000708 <DS18B20_ReadScratchpad>
  char msg[64];
  uint8_t settings[3];
    settings[0] = temperatureSensor.temperatureLimitHigh;
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <main+0xec>)
 8000c1a:	7bdb      	ldrb	r3, [r3, #15]
 8000c1c:	703b      	strb	r3, [r7, #0]
    settings[1] = temperatureSensor.temperatureLimitLow;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <main+0xec>)
 8000c20:	7b9b      	ldrb	r3, [r3, #14]
 8000c22:	707b      	strb	r3, [r7, #1]
    settings[2] = DS18B20_12_BITS_CONFIG;
 8000c24:	237f      	movs	r3, #127	@ 0x7f
 8000c26:	70bb      	strb	r3, [r7, #2]

    DS18B20_InitializationCommand(&temperatureSensor);
 8000c28:	4821      	ldr	r0, [pc, #132]	@ (8000cb0 <main+0xec>)
 8000c2a:	f7ff fe0d 	bl	8000848 <DS18B20_InitializationCommand>
    DS18B20_SkipRom(&temperatureSensor);
 8000c2e:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <main+0xec>)
 8000c30:	f7ff fe5a 	bl	80008e8 <DS18B20_SkipRom>
    DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <main+0xec>)
 8000c3a:	f7ff fddf 	bl	80007fc <DS18B20_WriteScratchpad>
  HAL_UART_Transmit(&huart1, hello, sizeof(hello) - 1, 100);
 8000c3e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	2212      	movs	r2, #18
 8000c46:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <main+0xf0>)
 8000c48:	f001 fcc8 	bl	80025dc <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart1, IE, sizeof(IE) - 1, 100);
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000c4c:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <main+0xec>)
 8000c4e:	f7ff fdfb 	bl	8000848 <DS18B20_InitializationCommand>
	  DS18B20_SkipRom(&temperatureSensor);
 8000c52:	4817      	ldr	r0, [pc, #92]	@ (8000cb0 <main+0xec>)
 8000c54:	f7ff fe48 	bl	80008e8 <DS18B20_SkipRom>
	  DS18B20_ConvertT(&temperatureSensor, DS18B20_DELAY); //ERROR
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4815      	ldr	r0, [pc, #84]	@ (8000cb0 <main+0xec>)
 8000c5c:	f7ff fd10 	bl	8000680 <DS18B20_ConvertT>
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000c60:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <main+0xec>)
 8000c62:	f7ff fdf1 	bl	8000848 <DS18B20_InitializationCommand>
	  DS18B20_SkipRom(&temperatureSensor);
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <main+0xec>)
 8000c68:	f7ff fe3e 	bl	80008e8 <DS18B20_SkipRom>
	  DS18B20_ReadScratchpad(&temperatureSensor);
 8000c6c:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <main+0xec>)
 8000c6e:	f7ff fd4b 	bl	8000708 <DS18B20_ReadScratchpad>
	  snprintf(msg, sizeof(msg), "Temperature: %d\r\n", (int16_t)temperatureSensor.temperature);
 8000c72:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <main+0xec>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc32 	bl	80004e0 <__aeabi_f2iz>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	1d38      	adds	r0, r7, #4
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <main+0xf4>)
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f001 febb 	bl	8002a00 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fa5d 	bl	800014c <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	1d39      	adds	r1, r7, #4
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <main+0xf0>)
 8000c9e:	f001 fc9d 	bl	80025dc <HAL_UART_Transmit>
	  DS18B20_InitializationCommand(&temperatureSensor);
 8000ca2:	bf00      	nop
 8000ca4:	e7d2      	b.n	8000c4c <main+0x88>
 8000ca6:	bf00      	nop
 8000ca8:	080033b4 	.word	0x080033b4
 8000cac:	20000180 	.word	0x20000180
 8000cb0:	200001c8 	.word	0x200001c8
 8000cb4:	20000138 	.word	0x20000138
 8000cb8:	080033a0 	.word	0x080033a0

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	@ 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fecc 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 ff36 	bl	8001b64 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f925 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f9a4 	bl	8002068 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f911 	bl	8000f4c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3740      	adds	r7, #64	@ 0x40
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <MX_I2C1_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_I2C1_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d72:	f000 fdb3 	bl	80018dc <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 f8e6 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000008c 	.word	0x2000008c
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	000186a0 	.word	0x000186a0

08000d90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <MX_SPI1_Init+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_SPI1_Init+0x64>)
 8000de2:	f001 facf 	bl	8002384 <HAL_SPI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dec:	f000 f8ae 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000e0 	.word	0x200000e0
 8000df8:	40013000 	.word	0x40013000

08000dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <MX_USART1_UART_Init+0x50>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART1_UART_Init+0x4c>)
 8000e34:	f001 fb2a 	bl	800248c <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3e:	f000 f885 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000138 	.word	0x20000138
 8000e4c:	40013800 	.word	0x40013800

08000e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f001 fb50 	bl	800252c <HAL_HalfDuplex_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 f85b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000180 	.word	0x20000180
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a20      	ldr	r2, [pc, #128]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <MX_GPIO_Init+0x9c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USART1_CK_GPIO_Port, USART1_CK_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eee:	4815      	ldr	r0, [pc, #84]	@ (8000f44 <MX_GPIO_Init+0xa0>)
 8000ef0:	f000 fcdc 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_CLK_GPIO_Port, I2C_CLK_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <MX_GPIO_Init+0xa4>)
 8000efa:	f000 fcd7 	bl	80018ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USART1_CK_Pin */
  GPIO_InitStruct.Pin = USART1_CK_Pin;
 8000efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USART1_CK_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4619      	mov	r1, r3
 8000f16:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <MX_GPIO_Init+0xa0>)
 8000f18:	f000 fb4c 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_CLK_Pin */
  GPIO_InitStruct.Pin = I2C_CLK_Pin;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(I2C_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_GPIO_Init+0xa4>)
 8000f34:	f000 fb3e 	bl	80015b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_MspInit+0x60>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_MspInit+0x60>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <HAL_I2C_MspInit+0x74>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d125      	bne.n	8001028 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ff4:	23c0      	movs	r3, #192	@ 0xc0
 8000ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480b      	ldr	r0, [pc, #44]	@ (8001038 <HAL_I2C_MspInit+0x7c>)
 800100c:	f000 fad2 	bl	80015b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800101a:	61d3      	str	r3, [r2, #28]
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_I2C_MspInit+0x78>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	40021000 	.word	0x40021000
 8001038:	40010c00 	.word	0x40010c00

0800103c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <HAL_SPI_MspInit+0x88>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d12f      	bne.n	80010bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a19      	ldr	r2, [pc, #100]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 8001062:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0x8c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800108c:	23a0      	movs	r3, #160	@ 0xa0
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	@ (80010cc <HAL_SPI_MspInit+0x90>)
 80010a0:	f000 fa88 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a4:	2340      	movs	r3, #64	@ 0x40
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_SPI_MspInit+0x90>)
 80010b8:	f000 fa7c 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40013000 	.word	0x40013000
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010800 	.word	0x40010800

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a32      	ldr	r2, [pc, #200]	@ (80011b4 <HAL_UART_MspInit+0xe4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d132      	bne.n	8001156 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a30      	ldr	r2, [pc, #192]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b2e      	ldr	r3, [pc, #184]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001136:	f000 fa3d 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800113a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4619      	mov	r1, r3
 800114e:	481b      	ldr	r0, [pc, #108]	@ (80011bc <HAL_UART_MspInit+0xec>)
 8001150:	f000 fa30 	bl	80015b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001154:	e02a      	b.n	80011ac <HAL_UART_MspInit+0xdc>
  else if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a19      	ldr	r2, [pc, #100]	@ (80011c0 <HAL_UART_MspInit+0xf0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d125      	bne.n	80011ac <HAL_UART_MspInit+0xdc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116a:	61d3      	str	r3, [r2, #28]
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <HAL_UART_MspInit+0xe8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001190:	2304      	movs	r3, #4
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001194:	2312      	movs	r3, #18
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_UART_MspInit+0xec>)
 80011a8:	f000 fa04 	bl	80015b4 <HAL_GPIO_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40004400 	.word	0x40004400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f8aa 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f001 fc14 	bl	8002a78 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20002800 	.word	0x20002800
 800127c:	00000400 	.word	0x00000400
 8001280:	200001e0 	.word	0x200001e0
 8001284:	20000330 	.word	0x20000330

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff fff8 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129a:	490c      	ldr	r1, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b0:	4c09      	ldr	r4, [pc, #36]	@ (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f001 fbe1 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff fc7f 	bl	8000bc4 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012d0:	08003438 	.word	0x08003438
  ldr r2, =_sbss
 80012d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012d8:	20000330 	.word	0x20000330

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f92b 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fe2c 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f935 	bl	800159a <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f90b 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000014 	.word	0x20000014
 8001364:	2000001c 	.word	0x2000001c
 8001368:	20000018 	.word	0x20000018

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <HAL_IncTick+0x20>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	2000001c 	.word	0x2000001c
 800138c:	200001e4 	.word	0x200001e4

08001390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	@ (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	200001e4 	.word	0x200001e4

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff0 	bl	8001390 <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffe0 	bl	8001390 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000001c 	.word	0x2000001c

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	@ (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	@ (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	@ 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff90 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff49 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff5e 	bl	8001434 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff90 	bl	80014a4 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5f 	bl	8001450 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb0 	bl	8001508 <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e161      	b.n	800188c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f040 8150 	bne.w	8001886 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a97      	ldr	r2, [pc, #604]	@ (8001848 <HAL_GPIO_Init+0x294>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d05e      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015f0:	4a95      	ldr	r2, [pc, #596]	@ (8001848 <HAL_GPIO_Init+0x294>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d875      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 80015f6:	4a95      	ldr	r2, [pc, #596]	@ (800184c <HAL_GPIO_Init+0x298>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d058      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 80015fc:	4a93      	ldr	r2, [pc, #588]	@ (800184c <HAL_GPIO_Init+0x298>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d86f      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001602:	4a93      	ldr	r2, [pc, #588]	@ (8001850 <HAL_GPIO_Init+0x29c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d052      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001608:	4a91      	ldr	r2, [pc, #580]	@ (8001850 <HAL_GPIO_Init+0x29c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d869      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800160e:	4a91      	ldr	r2, [pc, #580]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d04c      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001614:	4a8f      	ldr	r2, [pc, #572]	@ (8001854 <HAL_GPIO_Init+0x2a0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d863      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800161a:	4a8f      	ldr	r2, [pc, #572]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d046      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
 8001620:	4a8d      	ldr	r2, [pc, #564]	@ (8001858 <HAL_GPIO_Init+0x2a4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d85d      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 8001626:	2b12      	cmp	r3, #18
 8001628:	d82a      	bhi.n	8001680 <HAL_GPIO_Init+0xcc>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d859      	bhi.n	80016e2 <HAL_GPIO_Init+0x12e>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_GPIO_Init+0x80>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	080016af 	.word	0x080016af
 8001638:	08001689 	.word	0x08001689
 800163c:	0800169b 	.word	0x0800169b
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016e3 	.word	0x080016e3
 8001648:	080016e3 	.word	0x080016e3
 800164c:	080016e3 	.word	0x080016e3
 8001650:	080016e3 	.word	0x080016e3
 8001654:	080016e3 	.word	0x080016e3
 8001658:	080016e3 	.word	0x080016e3
 800165c:	080016e3 	.word	0x080016e3
 8001660:	080016e3 	.word	0x080016e3
 8001664:	080016e3 	.word	0x080016e3
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016e3 	.word	0x080016e3
 8001670:	080016e3 	.word	0x080016e3
 8001674:	080016e3 	.word	0x080016e3
 8001678:	08001691 	.word	0x08001691
 800167c:	080016a5 	.word	0x080016a5
 8001680:	4a76      	ldr	r2, [pc, #472]	@ (800185c <HAL_GPIO_Init+0x2a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e029      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e024      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01f      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e01a      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e013      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e009      	b.n	80016e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x130>
          break;
 80016e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	@ 0xff
 80016e8:	d801      	bhi.n	80016ee <HAL_GPIO_Init+0x13a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	e001      	b.n	80016f2 <HAL_GPIO_Init+0x13e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	@ 0xff
 80016f8:	d802      	bhi.n	8001700 <HAL_GPIO_Init+0x14c>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x152>
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	3b08      	subs	r3, #8
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	210f      	movs	r1, #15
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	6a39      	ldr	r1, [r7, #32]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80a9 	beq.w	8001886 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <HAL_GPIO_Init+0x2ac>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174c:	4a45      	ldr	r2, [pc, #276]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3d      	ldr	r2, [pc, #244]	@ (8001868 <HAL_GPIO_Init+0x2b4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1e0>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3c      	ldr	r2, [pc, #240]	@ (800186c <HAL_GPIO_Init+0x2b8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1dc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a3b      	ldr	r2, [pc, #236]	@ (8001870 <HAL_GPIO_Init+0x2bc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1d8>
 8001788:	2302      	movs	r3, #2
 800178a:	e004      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 800178c:	2303      	movs	r3, #3
 800178e:	e002      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_Init+0x1e2>
 8001794:	2300      	movs	r3, #0
 8001796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a6:	492f      	ldr	r1, [pc, #188]	@ (8001864 <HAL_GPIO_Init+0x2b0>)
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	492b      	ldr	r1, [pc, #172]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4927      	ldr	r1, [pc, #156]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4921      	ldr	r1, [pc, #132]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	491d      	ldr	r1, [pc, #116]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001800:	4013      	ands	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4917      	ldr	r1, [pc, #92]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4913      	ldr	r1, [pc, #76]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01f      	beq.n	8001878 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	490d      	ldr	r1, [pc, #52]	@ (8001874 <HAL_GPIO_Init+0x2c0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e01f      	b.n	8001886 <HAL_GPIO_Init+0x2d2>
 8001846:	bf00      	nop
 8001848:	10320000 	.word	0x10320000
 800184c:	10310000 	.word	0x10310000
 8001850:	10220000 	.word	0x10220000
 8001854:	10210000 	.word	0x10210000
 8001858:	10120000 	.word	0x10120000
 800185c:	10110000 	.word	0x10110000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_GPIO_Init+0x2f4>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4909      	ldr	r1, [pc, #36]	@ (80018a8 <HAL_GPIO_Init+0x2f4>)
 8001882:	4013      	ands	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae96 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	372c      	adds	r7, #44	@ 0x2c
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
 80018b8:	4613      	mov	r3, r2
 80018ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e12b      	b.n	8001b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fb5a 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	@ 0x24
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800192e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800193e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001940:	f000 fcda 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8001944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a81      	ldr	r2, [pc, #516]	@ (8001b50 <HAL_I2C_Init+0x274>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d807      	bhi.n	8001960 <HAL_I2C_Init+0x84>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a80      	ldr	r2, [pc, #512]	@ (8001b54 <HAL_I2C_Init+0x278>)
 8001954:	4293      	cmp	r3, r2
 8001956:	bf94      	ite	ls
 8001958:	2301      	movls	r3, #1
 800195a:	2300      	movhi	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	e006      	b.n	800196e <HAL_I2C_Init+0x92>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a7d      	ldr	r2, [pc, #500]	@ (8001b58 <HAL_I2C_Init+0x27c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0e7      	b.n	8001b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4a78      	ldr	r2, [pc, #480]	@ (8001b5c <HAL_I2C_Init+0x280>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9b      	lsrs	r3, r3, #18
 8001980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b50 <HAL_I2C_Init+0x274>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d802      	bhi.n	80019b0 <HAL_I2C_Init+0xd4>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	e009      	b.n	80019c4 <HAL_I2C_Init+0xe8>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4a69      	ldr	r2, [pc, #420]	@ (8001b60 <HAL_I2C_Init+0x284>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	3301      	adds	r3, #1
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	495c      	ldr	r1, [pc, #368]	@ (8001b50 <HAL_I2C_Init+0x274>)
 80019e0:	428b      	cmp	r3, r1
 80019e2:	d819      	bhi.n	8001a18 <HAL_I2C_Init+0x13c>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e59      	subs	r1, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019f8:	400b      	ands	r3, r1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_I2C_Init+0x138>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e59      	subs	r1, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a12:	e051      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e04f      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <HAL_I2C_Init+0x168>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e012      	b.n	8001a6a <HAL_I2C_Init+0x18e>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e58      	subs	r0, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	0099      	lsls	r1, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x196>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e022      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10e      	bne.n	8001a98 <HAL_I2C_Init+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e58      	subs	r0, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	440b      	add	r3, r1
 8001a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a96:	e00f      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1e58      	subs	r0, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	0099      	lsls	r1, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	6809      	ldr	r1, [r1, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ae6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6911      	ldr	r1, [r2, #16]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68d2      	ldr	r2, [r2, #12]
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	000186a0 	.word	0x000186a0
 8001b54:	001e847f 	.word	0x001e847f
 8001b58:	003d08ff 	.word	0x003d08ff
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	10624dd3 	.word	0x10624dd3

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fba6 	bl	8001390 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fba2 	bl	8001390 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb92 	bl	8001390 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb8e 	bl	8001390 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb47 	bl	8001390 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb43 	bl	8001390 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb26 	bl	8001390 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff fb22 	bl	8001390 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff fb06 	bl	8001390 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff fb02 	bl	8001390 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 face 	bl	8002348 <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff faec 	bl	8001390 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fae8 	bl	8001390 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff faa9 	bl	8001390 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff faa5 	bl	8001390 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	@ 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa59 	bl	8001390 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fa55 	bl	8001390 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fa43 	bl	8001390 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fa3f 	bl	8001390 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa13 	bl	8001390 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa0f 	bl	8001390 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f9e3 	bl	8001390 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f9df 	bl	8001390 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff f9cc 	bl	8001390 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff f9c8 	bl	8001390 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7ff f91a 	bl	8001390 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f916 	bl	8001390 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	@ (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f878 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	080033c8 	.word	0x080033c8
 8002234:	20000014 	.word	0x20000014
 8002238:	20000018 	.word	0x20000018

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x30>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x36>
 800226a:	e027      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	e027      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	613b      	str	r3, [r7, #16]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	693b      	ldr	r3, [r7, #16]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	080033e0 	.word	0x080033e0
 80022dc:	080033f0 	.word	0x080033f0
 80022e0:	003d0900 	.word	0x003d0900

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	@ (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000014 	.word	0x20000014

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	@ (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	080033d8 	.word	0x080033d8

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002324:	f7ff ffde 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	@ (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	080033d8 	.word	0x080033d8

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000014 	.word	0x20000014
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e076      	b.n	8002484 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023a6:	d009      	beq.n	80023bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	e005      	b.n	80023bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fe30 	bl	800103c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	0c1a      	lsrs	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f002 0204 	and.w	r2, r2, #4
 8002462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e042      	b.n	8002524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fe0c 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fa07 	bl	80028e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e04a      	b.n	80025d4 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fdbc 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	@ 0x24
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800256e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f9b7 	bl	80028e4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002594:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0208 	orr.w	r2, r2, #8
 80025a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d16d      	bne.n	80026d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_UART_Transmit+0x2c>
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e066      	b.n	80026da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	@ 0x21
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800261a:	f7fe feb9 	bl	8001390 <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002634:	d108      	bne.n	8002648 <HAL_UART_Transmit+0x6c>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e003      	b.n	8002650 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002650:	e02a      	b.n	80026a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f8d2 	bl	8002806 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e036      	b.n	80026da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	3302      	adds	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e007      	b.n	800269a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1cf      	bne.n	8002652 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2140      	movs	r1, #64	@ 0x40
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f8a2 	bl	8002806 <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e006      	b.n	80026da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b08a      	sub	sp, #40	@ 0x28
 80026e6:	af02      	add	r7, sp, #8
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d17c      	bne.n	80027fc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_UART_Receive+0x2c>
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e075      	b.n	80027fe <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2222      	movs	r2, #34	@ 0x22
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002726:	f7fe fe33 	bl	8001390 <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002740:	d108      	bne.n	8002754 <HAL_UART_Receive+0x72>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e003      	b.n	800275c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800275c:	e043      	b.n	80027e6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	2120      	movs	r1, #32
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f84c 	bl	8002806 <UART_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e042      	b.n	80027fe <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	b29b      	uxth	r3, r3
 8002786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278a:	b29a      	uxth	r2, r3
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	3302      	adds	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e01f      	b.n	80027d8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a0:	d007      	beq.n	80027b2 <HAL_UART_Receive+0xd0>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <HAL_UART_Receive+0xde>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e008      	b.n	80027d2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1b6      	bne.n	800275e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b090      	sub	sp, #64	@ 0x40
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002816:	e050      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d04c      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <UART_WaitOnFlagUntilTimeout+0x30>
 8002826:	f7fe fdb3 	bl	8001390 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002832:	429a      	cmp	r2, r3
 8002834:	d241      	bcs.n	80028ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800284c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002856:	637a      	str	r2, [r7, #52]	@ 0x34
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800285c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e5      	bne.n	8002836 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	613b      	str	r3, [r7, #16]
   return(result);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800288a:	623a      	str	r2, [r7, #32]
 800288c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	69f9      	ldr	r1, [r7, #28]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	61bb      	str	r3, [r7, #24]
   return(result);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e00f      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d09f      	beq.n	8002818 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3740      	adds	r7, #64	@ 0x40
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800291e:	f023 030c 	bic.w	r3, r3, #12
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	430b      	orrs	r3, r1
 800292a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <UART_SetConfig+0x114>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800294c:	f7ff fce8 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	e002      	b.n	800295a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002954:	f7ff fcd0 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8002958:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <UART_SetConfig+0x118>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	0119      	lsls	r1, r3, #4
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009a      	lsls	r2, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <UART_SetConfig+0x118>)
 8002992:	fba3 0302 	umull	r0, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2064      	movs	r0, #100	@ 0x64
 800299a:	fb00 f303 	mul.w	r3, r0, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	3332      	adds	r3, #50	@ 0x32
 80029a4:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <UART_SetConfig+0x118>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b0:	4419      	add	r1, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009a      	lsls	r2, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <UART_SetConfig+0x118>)
 80029ca:	fba3 0302 	umull	r0, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2064      	movs	r0, #100	@ 0x64
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	3332      	adds	r3, #50	@ 0x32
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <UART_SetConfig+0x118>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	440a      	add	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013800 	.word	0x40013800
 80029fc:	51eb851f 	.word	0x51eb851f

08002a00 <sniprintf>:
 8002a00:	b40c      	push	{r2, r3}
 8002a02:	b530      	push	{r4, r5, lr}
 8002a04:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <sniprintf+0x64>)
 8002a06:	1e0c      	subs	r4, r1, #0
 8002a08:	681d      	ldr	r5, [r3, #0]
 8002a0a:	b09d      	sub	sp, #116	@ 0x74
 8002a0c:	da08      	bge.n	8002a20 <sniprintf+0x20>
 8002a0e:	238b      	movs	r3, #139	@ 0x8b
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	602b      	str	r3, [r5, #0]
 8002a16:	b01d      	add	sp, #116	@ 0x74
 8002a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a1c:	b002      	add	sp, #8
 8002a1e:	4770      	bx	lr
 8002a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a28:	bf0c      	ite	eq
 8002a2a:	4623      	moveq	r3, r4
 8002a2c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a30:	9304      	str	r3, [sp, #16]
 8002a32:	9307      	str	r3, [sp, #28]
 8002a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a38:	9002      	str	r0, [sp, #8]
 8002a3a:	9006      	str	r0, [sp, #24]
 8002a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a40:	4628      	mov	r0, r5
 8002a42:	ab21      	add	r3, sp, #132	@ 0x84
 8002a44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002a46:	a902      	add	r1, sp, #8
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	f000 f993 	bl	8002d74 <_svfiprintf_r>
 8002a4e:	1c43      	adds	r3, r0, #1
 8002a50:	bfbc      	itt	lt
 8002a52:	238b      	movlt	r3, #139	@ 0x8b
 8002a54:	602b      	strlt	r3, [r5, #0]
 8002a56:	2c00      	cmp	r4, #0
 8002a58:	d0dd      	beq.n	8002a16 <sniprintf+0x16>
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	9b02      	ldr	r3, [sp, #8]
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e7d9      	b.n	8002a16 <sniprintf+0x16>
 8002a62:	bf00      	nop
 8002a64:	20000020 	.word	0x20000020

08002a68 <memset>:
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4402      	add	r2, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <__errno>:
 8002a78:	4b01      	ldr	r3, [pc, #4]	@ (8002a80 <__errno+0x8>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000020 	.word	0x20000020

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	2600      	movs	r6, #0
 8002a88:	4d0c      	ldr	r5, [pc, #48]	@ (8002abc <__libc_init_array+0x38>)
 8002a8a:	4c0d      	ldr	r4, [pc, #52]	@ (8002ac0 <__libc_init_array+0x3c>)
 8002a8c:	1b64      	subs	r4, r4, r5
 8002a8e:	10a4      	asrs	r4, r4, #2
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	f000 fc78 	bl	8003388 <_init>
 8002a98:	2600      	movs	r6, #0
 8002a9a:	4d0a      	ldr	r5, [pc, #40]	@ (8002ac4 <__libc_init_array+0x40>)
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac8 <__libc_init_array+0x44>)
 8002a9e:	1b64      	subs	r4, r4, r5
 8002aa0:	10a4      	asrs	r4, r4, #2
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08003430 	.word	0x08003430
 8002ac0:	08003430 	.word	0x08003430
 8002ac4:	08003430 	.word	0x08003430
 8002ac8:	08003434 	.word	0x08003434

08002acc <__retarget_lock_acquire_recursive>:
 8002acc:	4770      	bx	lr

08002ace <__retarget_lock_release_recursive>:
 8002ace:	4770      	bx	lr

08002ad0 <_free_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d040      	beq.n	8002b5a <_free_r+0x8a>
 8002ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002adc:	1f0c      	subs	r4, r1, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bfb8      	it	lt
 8002ae2:	18e4      	addlt	r4, r4, r3
 8002ae4:	f000 f8de 	bl	8002ca4 <__malloc_lock>
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <_free_r+0x8c>)
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	b933      	cbnz	r3, 8002afc <_free_r+0x2c>
 8002aee:	6063      	str	r3, [r4, #4]
 8002af0:	6014      	str	r4, [r2, #0]
 8002af2:	4628      	mov	r0, r5
 8002af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002af8:	f000 b8da 	b.w	8002cb0 <__malloc_unlock>
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	d908      	bls.n	8002b12 <_free_r+0x42>
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	1821      	adds	r1, r4, r0
 8002b04:	428b      	cmp	r3, r1
 8002b06:	bf01      	itttt	eq
 8002b08:	6819      	ldreq	r1, [r3, #0]
 8002b0a:	685b      	ldreq	r3, [r3, #4]
 8002b0c:	1809      	addeq	r1, r1, r0
 8002b0e:	6021      	streq	r1, [r4, #0]
 8002b10:	e7ed      	b.n	8002aee <_free_r+0x1e>
 8002b12:	461a      	mov	r2, r3
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b10b      	cbz	r3, 8002b1c <_free_r+0x4c>
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d9fa      	bls.n	8002b12 <_free_r+0x42>
 8002b1c:	6811      	ldr	r1, [r2, #0]
 8002b1e:	1850      	adds	r0, r2, r1
 8002b20:	42a0      	cmp	r0, r4
 8002b22:	d10b      	bne.n	8002b3c <_free_r+0x6c>
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	1850      	adds	r0, r2, r1
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	d1e0      	bne.n	8002af2 <_free_r+0x22>
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4408      	add	r0, r1
 8002b36:	6010      	str	r0, [r2, #0]
 8002b38:	6053      	str	r3, [r2, #4]
 8002b3a:	e7da      	b.n	8002af2 <_free_r+0x22>
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x74>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d6      	b.n	8002af2 <_free_r+0x22>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	bf01      	itttt	eq
 8002b4c:	6819      	ldreq	r1, [r3, #0]
 8002b4e:	685b      	ldreq	r3, [r3, #4]
 8002b50:	1809      	addeq	r1, r1, r0
 8002b52:	6021      	streq	r1, [r4, #0]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6054      	str	r4, [r2, #4]
 8002b58:	e7cb      	b.n	8002af2 <_free_r+0x22>
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	2000032c 	.word	0x2000032c

08002b60 <sbrk_aligned>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0f      	ldr	r6, [pc, #60]	@ (8002ba0 <sbrk_aligned+0x40>)
 8002b64:	460c      	mov	r4, r1
 8002b66:	6831      	ldr	r1, [r6, #0]
 8002b68:	4605      	mov	r5, r0
 8002b6a:	b911      	cbnz	r1, 8002b72 <sbrk_aligned+0x12>
 8002b6c:	f000 fbaa 	bl	80032c4 <_sbrk_r>
 8002b70:	6030      	str	r0, [r6, #0]
 8002b72:	4621      	mov	r1, r4
 8002b74:	4628      	mov	r0, r5
 8002b76:	f000 fba5 	bl	80032c4 <_sbrk_r>
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	d103      	bne.n	8002b86 <sbrk_aligned+0x26>
 8002b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b82:	4620      	mov	r0, r4
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	1cc4      	adds	r4, r0, #3
 8002b88:	f024 0403 	bic.w	r4, r4, #3
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d0f8      	beq.n	8002b82 <sbrk_aligned+0x22>
 8002b90:	1a21      	subs	r1, r4, r0
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 fb96 	bl	80032c4 <_sbrk_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d1f2      	bne.n	8002b82 <sbrk_aligned+0x22>
 8002b9c:	e7ef      	b.n	8002b7e <sbrk_aligned+0x1e>
 8002b9e:	bf00      	nop
 8002ba0:	20000328 	.word	0x20000328

08002ba4 <_malloc_r>:
 8002ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba8:	1ccd      	adds	r5, r1, #3
 8002baa:	f025 0503 	bic.w	r5, r5, #3
 8002bae:	3508      	adds	r5, #8
 8002bb0:	2d0c      	cmp	r5, #12
 8002bb2:	bf38      	it	cc
 8002bb4:	250c      	movcc	r5, #12
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	4606      	mov	r6, r0
 8002bba:	db01      	blt.n	8002bc0 <_malloc_r+0x1c>
 8002bbc:	42a9      	cmp	r1, r5
 8002bbe:	d904      	bls.n	8002bca <_malloc_r+0x26>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	6033      	str	r3, [r6, #0]
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ca0 <_malloc_r+0xfc>
 8002bce:	f000 f869 	bl	8002ca4 <__malloc_lock>
 8002bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	bb44      	cbnz	r4, 8002c2c <_malloc_r+0x88>
 8002bda:	4629      	mov	r1, r5
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f7ff ffbf 	bl	8002b60 <sbrk_aligned>
 8002be2:	1c43      	adds	r3, r0, #1
 8002be4:	4604      	mov	r4, r0
 8002be6:	d158      	bne.n	8002c9a <_malloc_r+0xf6>
 8002be8:	f8d8 4000 	ldr.w	r4, [r8]
 8002bec:	4627      	mov	r7, r4
 8002bee:	2f00      	cmp	r7, #0
 8002bf0:	d143      	bne.n	8002c7a <_malloc_r+0xd6>
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d04b      	beq.n	8002c8e <_malloc_r+0xea>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	eb04 0903 	add.w	r9, r4, r3
 8002c00:	f000 fb60 	bl	80032c4 <_sbrk_r>
 8002c04:	4581      	cmp	r9, r0
 8002c06:	d142      	bne.n	8002c8e <_malloc_r+0xea>
 8002c08:	6821      	ldr	r1, [r4, #0]
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	1a6d      	subs	r5, r5, r1
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7ff ffa6 	bl	8002b60 <sbrk_aligned>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d03a      	beq.n	8002c8e <_malloc_r+0xea>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	442b      	add	r3, r5
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	bb62      	cbnz	r2, 8002c80 <_malloc_r+0xdc>
 8002c26:	f8c8 7000 	str.w	r7, [r8]
 8002c2a:	e00f      	b.n	8002c4c <_malloc_r+0xa8>
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	1b52      	subs	r2, r2, r5
 8002c30:	d420      	bmi.n	8002c74 <_malloc_r+0xd0>
 8002c32:	2a0b      	cmp	r2, #11
 8002c34:	d917      	bls.n	8002c66 <_malloc_r+0xc2>
 8002c36:	1961      	adds	r1, r4, r5
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	6025      	str	r5, [r4, #0]
 8002c3c:	bf18      	it	ne
 8002c3e:	6059      	strne	r1, [r3, #4]
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	bf08      	it	eq
 8002c44:	f8c8 1000 	streq.w	r1, [r8]
 8002c48:	5162      	str	r2, [r4, r5]
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f000 f82f 	bl	8002cb0 <__malloc_unlock>
 8002c52:	f104 000b 	add.w	r0, r4, #11
 8002c56:	1d23      	adds	r3, r4, #4
 8002c58:	f020 0007 	bic.w	r0, r0, #7
 8002c5c:	1ac2      	subs	r2, r0, r3
 8002c5e:	bf1c      	itt	ne
 8002c60:	1a1b      	subne	r3, r3, r0
 8002c62:	50a3      	strne	r3, [r4, r2]
 8002c64:	e7af      	b.n	8002bc6 <_malloc_r+0x22>
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	bf0c      	ite	eq
 8002c6c:	f8c8 2000 	streq.w	r2, [r8]
 8002c70:	605a      	strne	r2, [r3, #4]
 8002c72:	e7eb      	b.n	8002c4c <_malloc_r+0xa8>
 8002c74:	4623      	mov	r3, r4
 8002c76:	6864      	ldr	r4, [r4, #4]
 8002c78:	e7ae      	b.n	8002bd8 <_malloc_r+0x34>
 8002c7a:	463c      	mov	r4, r7
 8002c7c:	687f      	ldr	r7, [r7, #4]
 8002c7e:	e7b6      	b.n	8002bee <_malloc_r+0x4a>
 8002c80:	461a      	mov	r2, r3
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d1fb      	bne.n	8002c80 <_malloc_r+0xdc>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6053      	str	r3, [r2, #4]
 8002c8c:	e7de      	b.n	8002c4c <_malloc_r+0xa8>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	4630      	mov	r0, r6
 8002c92:	6033      	str	r3, [r6, #0]
 8002c94:	f000 f80c 	bl	8002cb0 <__malloc_unlock>
 8002c98:	e794      	b.n	8002bc4 <_malloc_r+0x20>
 8002c9a:	6005      	str	r5, [r0, #0]
 8002c9c:	e7d6      	b.n	8002c4c <_malloc_r+0xa8>
 8002c9e:	bf00      	nop
 8002ca0:	2000032c 	.word	0x2000032c

08002ca4 <__malloc_lock>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	@ (8002cac <__malloc_lock+0x8>)
 8002ca6:	f7ff bf11 	b.w	8002acc <__retarget_lock_acquire_recursive>
 8002caa:	bf00      	nop
 8002cac:	20000324 	.word	0x20000324

08002cb0 <__malloc_unlock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	@ (8002cb8 <__malloc_unlock+0x8>)
 8002cb2:	f7ff bf0c 	b.w	8002ace <__retarget_lock_release_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000324 	.word	0x20000324

08002cbc <__ssputs_r>:
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	461f      	mov	r7, r3
 8002cc2:	688e      	ldr	r6, [r1, #8]
 8002cc4:	4682      	mov	sl, r0
 8002cc6:	42be      	cmp	r6, r7
 8002cc8:	460c      	mov	r4, r1
 8002cca:	4690      	mov	r8, r2
 8002ccc:	680b      	ldr	r3, [r1, #0]
 8002cce:	d82d      	bhi.n	8002d2c <__ssputs_r+0x70>
 8002cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002cd8:	d026      	beq.n	8002d28 <__ssputs_r+0x6c>
 8002cda:	6965      	ldr	r5, [r4, #20]
 8002cdc:	6909      	ldr	r1, [r1, #16]
 8002cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ce2:	eba3 0901 	sub.w	r9, r3, r1
 8002ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cea:	1c7b      	adds	r3, r7, #1
 8002cec:	444b      	add	r3, r9
 8002cee:	106d      	asrs	r5, r5, #1
 8002cf0:	429d      	cmp	r5, r3
 8002cf2:	bf38      	it	cc
 8002cf4:	461d      	movcc	r5, r3
 8002cf6:	0553      	lsls	r3, r2, #21
 8002cf8:	d527      	bpl.n	8002d4a <__ssputs_r+0x8e>
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7ff ff52 	bl	8002ba4 <_malloc_r>
 8002d00:	4606      	mov	r6, r0
 8002d02:	b360      	cbz	r0, 8002d5e <__ssputs_r+0xa2>
 8002d04:	464a      	mov	r2, r9
 8002d06:	6921      	ldr	r1, [r4, #16]
 8002d08:	f000 fafa 	bl	8003300 <memcpy>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d16:	81a3      	strh	r3, [r4, #12]
 8002d18:	6126      	str	r6, [r4, #16]
 8002d1a:	444e      	add	r6, r9
 8002d1c:	6026      	str	r6, [r4, #0]
 8002d1e:	463e      	mov	r6, r7
 8002d20:	6165      	str	r5, [r4, #20]
 8002d22:	eba5 0509 	sub.w	r5, r5, r9
 8002d26:	60a5      	str	r5, [r4, #8]
 8002d28:	42be      	cmp	r6, r7
 8002d2a:	d900      	bls.n	8002d2e <__ssputs_r+0x72>
 8002d2c:	463e      	mov	r6, r7
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4641      	mov	r1, r8
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	f000 faac 	bl	8003290 <memmove>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	60a3      	str	r3, [r4, #8]
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	4433      	add	r3, r6
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	462a      	mov	r2, r5
 8002d4c:	f000 fae6 	bl	800331c <_realloc_r>
 8002d50:	4606      	mov	r6, r0
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d1e0      	bne.n	8002d18 <__ssputs_r+0x5c>
 8002d56:	4650      	mov	r0, sl
 8002d58:	6921      	ldr	r1, [r4, #16]
 8002d5a:	f7ff feb9 	bl	8002ad0 <_free_r>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	f8ca 3000 	str.w	r3, [sl]
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	e7e9      	b.n	8002d46 <__ssputs_r+0x8a>
	...

08002d74 <_svfiprintf_r>:
 8002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d78:	4698      	mov	r8, r3
 8002d7a:	898b      	ldrh	r3, [r1, #12]
 8002d7c:	4607      	mov	r7, r0
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	460d      	mov	r5, r1
 8002d82:	4614      	mov	r4, r2
 8002d84:	b09d      	sub	sp, #116	@ 0x74
 8002d86:	d510      	bpl.n	8002daa <_svfiprintf_r+0x36>
 8002d88:	690b      	ldr	r3, [r1, #16]
 8002d8a:	b973      	cbnz	r3, 8002daa <_svfiprintf_r+0x36>
 8002d8c:	2140      	movs	r1, #64	@ 0x40
 8002d8e:	f7ff ff09 	bl	8002ba4 <_malloc_r>
 8002d92:	6028      	str	r0, [r5, #0]
 8002d94:	6128      	str	r0, [r5, #16]
 8002d96:	b930      	cbnz	r0, 8002da6 <_svfiprintf_r+0x32>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	b01d      	add	sp, #116	@ 0x74
 8002da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da6:	2340      	movs	r3, #64	@ 0x40
 8002da8:	616b      	str	r3, [r5, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dae:	2320      	movs	r3, #32
 8002db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002db4:	2330      	movs	r3, #48	@ 0x30
 8002db6:	f04f 0901 	mov.w	r9, #1
 8002dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dbe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002f58 <_svfiprintf_r+0x1e4>
 8002dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	469a      	mov	sl, r3
 8002dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dce:	b10a      	cbz	r2, 8002dd4 <_svfiprintf_r+0x60>
 8002dd0:	2a25      	cmp	r2, #37	@ 0x25
 8002dd2:	d1f9      	bne.n	8002dc8 <_svfiprintf_r+0x54>
 8002dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8002dd8:	d00b      	beq.n	8002df2 <_svfiprintf_r+0x7e>
 8002dda:	465b      	mov	r3, fp
 8002ddc:	4622      	mov	r2, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	4638      	mov	r0, r7
 8002de2:	f7ff ff6b 	bl	8002cbc <__ssputs_r>
 8002de6:	3001      	adds	r0, #1
 8002de8:	f000 80a7 	beq.w	8002f3a <_svfiprintf_r+0x1c6>
 8002dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dee:	445a      	add	r2, fp
 8002df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002df2:	f89a 3000 	ldrb.w	r3, [sl]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 809f 	beq.w	8002f3a <_svfiprintf_r+0x1c6>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e06:	f10a 0a01 	add.w	sl, sl, #1
 8002e0a:	9304      	str	r3, [sp, #16]
 8002e0c:	9307      	str	r3, [sp, #28]
 8002e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e14:	4654      	mov	r4, sl
 8002e16:	2205      	movs	r2, #5
 8002e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1c:	484e      	ldr	r0, [pc, #312]	@ (8002f58 <_svfiprintf_r+0x1e4>)
 8002e1e:	f000 fa61 	bl	80032e4 <memchr>
 8002e22:	9a04      	ldr	r2, [sp, #16]
 8002e24:	b9d8      	cbnz	r0, 8002e5e <_svfiprintf_r+0xea>
 8002e26:	06d0      	lsls	r0, r2, #27
 8002e28:	bf44      	itt	mi
 8002e2a:	2320      	movmi	r3, #32
 8002e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e30:	0711      	lsls	r1, r2, #28
 8002e32:	bf44      	itt	mi
 8002e34:	232b      	movmi	r3, #43	@ 0x2b
 8002e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e40:	d015      	beq.n	8002e6e <_svfiprintf_r+0xfa>
 8002e42:	4654      	mov	r4, sl
 8002e44:	2000      	movs	r0, #0
 8002e46:	f04f 0c0a 	mov.w	ip, #10
 8002e4a:	9a07      	ldr	r2, [sp, #28]
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e52:	3b30      	subs	r3, #48	@ 0x30
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d94b      	bls.n	8002ef0 <_svfiprintf_r+0x17c>
 8002e58:	b1b0      	cbz	r0, 8002e88 <_svfiprintf_r+0x114>
 8002e5a:	9207      	str	r2, [sp, #28]
 8002e5c:	e014      	b.n	8002e88 <_svfiprintf_r+0x114>
 8002e5e:	eba0 0308 	sub.w	r3, r0, r8
 8002e62:	fa09 f303 	lsl.w	r3, r9, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	46a2      	mov	sl, r4
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	e7d2      	b.n	8002e14 <_svfiprintf_r+0xa0>
 8002e6e:	9b03      	ldr	r3, [sp, #12]
 8002e70:	1d19      	adds	r1, r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	9103      	str	r1, [sp, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bfbb      	ittet	lt
 8002e7a:	425b      	neglt	r3, r3
 8002e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e80:	9307      	strge	r3, [sp, #28]
 8002e82:	9307      	strlt	r3, [sp, #28]
 8002e84:	bfb8      	it	lt
 8002e86:	9204      	strlt	r2, [sp, #16]
 8002e88:	7823      	ldrb	r3, [r4, #0]
 8002e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e8c:	d10a      	bne.n	8002ea4 <_svfiprintf_r+0x130>
 8002e8e:	7863      	ldrb	r3, [r4, #1]
 8002e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e92:	d132      	bne.n	8002efa <_svfiprintf_r+0x186>
 8002e94:	9b03      	ldr	r3, [sp, #12]
 8002e96:	3402      	adds	r4, #2
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	9203      	str	r2, [sp, #12]
 8002e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ea2:	9305      	str	r3, [sp, #20]
 8002ea4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002f5c <_svfiprintf_r+0x1e8>
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	4650      	mov	r0, sl
 8002eac:	7821      	ldrb	r1, [r4, #0]
 8002eae:	f000 fa19 	bl	80032e4 <memchr>
 8002eb2:	b138      	cbz	r0, 8002ec4 <_svfiprintf_r+0x150>
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	9b04      	ldr	r3, [sp, #16]
 8002eb8:	eba0 000a 	sub.w	r0, r0, sl
 8002ebc:	4082      	lsls	r2, r0
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	3401      	adds	r4, #1
 8002ec2:	9304      	str	r3, [sp, #16]
 8002ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec8:	2206      	movs	r2, #6
 8002eca:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <_svfiprintf_r+0x1ec>)
 8002ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ed0:	f000 fa08 	bl	80032e4 <memchr>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d036      	beq.n	8002f46 <_svfiprintf_r+0x1d2>
 8002ed8:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <_svfiprintf_r+0x1f0>)
 8002eda:	bb1b      	cbnz	r3, 8002f24 <_svfiprintf_r+0x1b0>
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	3307      	adds	r3, #7
 8002ee0:	f023 0307 	bic.w	r3, r3, #7
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eea:	4433      	add	r3, r6
 8002eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eee:	e76a      	b.n	8002dc6 <_svfiprintf_r+0x52>
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ef8:	e7a8      	b.n	8002e4c <_svfiprintf_r+0xd8>
 8002efa:	2300      	movs	r3, #0
 8002efc:	f04f 0c0a 	mov.w	ip, #10
 8002f00:	4619      	mov	r1, r3
 8002f02:	3401      	adds	r4, #1
 8002f04:	9305      	str	r3, [sp, #20]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f0c:	3a30      	subs	r2, #48	@ 0x30
 8002f0e:	2a09      	cmp	r2, #9
 8002f10:	d903      	bls.n	8002f1a <_svfiprintf_r+0x1a6>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0c6      	beq.n	8002ea4 <_svfiprintf_r+0x130>
 8002f16:	9105      	str	r1, [sp, #20]
 8002f18:	e7c4      	b.n	8002ea4 <_svfiprintf_r+0x130>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f22:	e7f0      	b.n	8002f06 <_svfiprintf_r+0x192>
 8002f24:	ab03      	add	r3, sp, #12
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	462a      	mov	r2, r5
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <_svfiprintf_r+0x1f4>)
 8002f2e:	a904      	add	r1, sp, #16
 8002f30:	f3af 8000 	nop.w
 8002f34:	1c42      	adds	r2, r0, #1
 8002f36:	4606      	mov	r6, r0
 8002f38:	d1d6      	bne.n	8002ee8 <_svfiprintf_r+0x174>
 8002f3a:	89ab      	ldrh	r3, [r5, #12]
 8002f3c:	065b      	lsls	r3, r3, #25
 8002f3e:	f53f af2d 	bmi.w	8002d9c <_svfiprintf_r+0x28>
 8002f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f44:	e72c      	b.n	8002da0 <_svfiprintf_r+0x2c>
 8002f46:	ab03      	add	r3, sp, #12
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462a      	mov	r2, r5
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <_svfiprintf_r+0x1f4>)
 8002f50:	a904      	add	r1, sp, #16
 8002f52:	f000 f87d 	bl	8003050 <_printf_i>
 8002f56:	e7ed      	b.n	8002f34 <_svfiprintf_r+0x1c0>
 8002f58:	080033f2 	.word	0x080033f2
 8002f5c:	080033f8 	.word	0x080033f8
 8002f60:	080033fc 	.word	0x080033fc
 8002f64:	00000000 	.word	0x00000000
 8002f68:	08002cbd 	.word	0x08002cbd

08002f6c <_printf_common>:
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	4616      	mov	r6, r2
 8002f72:	4698      	mov	r8, r3
 8002f74:	688a      	ldr	r2, [r1, #8]
 8002f76:	690b      	ldr	r3, [r1, #16]
 8002f78:	4607      	mov	r7, r0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	bfb8      	it	lt
 8002f7e:	4613      	movlt	r3, r2
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f86:	460c      	mov	r4, r1
 8002f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f8c:	b10a      	cbz	r2, 8002f92 <_printf_common+0x26>
 8002f8e:	3301      	adds	r3, #1
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	0699      	lsls	r1, r3, #26
 8002f96:	bf42      	ittt	mi
 8002f98:	6833      	ldrmi	r3, [r6, #0]
 8002f9a:	3302      	addmi	r3, #2
 8002f9c:	6033      	strmi	r3, [r6, #0]
 8002f9e:	6825      	ldr	r5, [r4, #0]
 8002fa0:	f015 0506 	ands.w	r5, r5, #6
 8002fa4:	d106      	bne.n	8002fb4 <_printf_common+0x48>
 8002fa6:	f104 0a19 	add.w	sl, r4, #25
 8002faa:	68e3      	ldr	r3, [r4, #12]
 8002fac:	6832      	ldr	r2, [r6, #0]
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	42ab      	cmp	r3, r5
 8002fb2:	dc2b      	bgt.n	800300c <_printf_common+0xa0>
 8002fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	3b00      	subs	r3, #0
 8002fbc:	bf18      	it	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	0692      	lsls	r2, r2, #26
 8002fc2:	d430      	bmi.n	8003026 <_printf_common+0xba>
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fcc:	47c8      	blx	r9
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d023      	beq.n	800301a <_printf_common+0xae>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	6922      	ldr	r2, [r4, #16]
 8002fd6:	f003 0306 	and.w	r3, r3, #6
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf14      	ite	ne
 8002fde:	2500      	movne	r5, #0
 8002fe0:	6833      	ldreq	r3, [r6, #0]
 8002fe2:	f04f 0600 	mov.w	r6, #0
 8002fe6:	bf08      	it	eq
 8002fe8:	68e5      	ldreq	r5, [r4, #12]
 8002fea:	f104 041a 	add.w	r4, r4, #26
 8002fee:	bf08      	it	eq
 8002ff0:	1aed      	subeq	r5, r5, r3
 8002ff2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ff6:	bf08      	it	eq
 8002ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bfc4      	itt	gt
 8003000:	1a9b      	subgt	r3, r3, r2
 8003002:	18ed      	addgt	r5, r5, r3
 8003004:	42b5      	cmp	r5, r6
 8003006:	d11a      	bne.n	800303e <_printf_common+0xd2>
 8003008:	2000      	movs	r0, #0
 800300a:	e008      	b.n	800301e <_printf_common+0xb2>
 800300c:	2301      	movs	r3, #1
 800300e:	4652      	mov	r2, sl
 8003010:	4641      	mov	r1, r8
 8003012:	4638      	mov	r0, r7
 8003014:	47c8      	blx	r9
 8003016:	3001      	adds	r0, #1
 8003018:	d103      	bne.n	8003022 <_printf_common+0xb6>
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003022:	3501      	adds	r5, #1
 8003024:	e7c1      	b.n	8002faa <_printf_common+0x3e>
 8003026:	2030      	movs	r0, #48	@ 0x30
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003034:	4422      	add	r2, r4
 8003036:	3302      	adds	r3, #2
 8003038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800303c:	e7c2      	b.n	8002fc4 <_printf_common+0x58>
 800303e:	2301      	movs	r3, #1
 8003040:	4622      	mov	r2, r4
 8003042:	4641      	mov	r1, r8
 8003044:	4638      	mov	r0, r7
 8003046:	47c8      	blx	r9
 8003048:	3001      	adds	r0, #1
 800304a:	d0e6      	beq.n	800301a <_printf_common+0xae>
 800304c:	3601      	adds	r6, #1
 800304e:	e7d9      	b.n	8003004 <_printf_common+0x98>

08003050 <_printf_i>:
 8003050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	7e0f      	ldrb	r7, [r1, #24]
 8003056:	4691      	mov	r9, r2
 8003058:	2f78      	cmp	r7, #120	@ 0x78
 800305a:	4680      	mov	r8, r0
 800305c:	460c      	mov	r4, r1
 800305e:	469a      	mov	sl, r3
 8003060:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003066:	d807      	bhi.n	8003078 <_printf_i+0x28>
 8003068:	2f62      	cmp	r7, #98	@ 0x62
 800306a:	d80a      	bhi.n	8003082 <_printf_i+0x32>
 800306c:	2f00      	cmp	r7, #0
 800306e:	f000 80d3 	beq.w	8003218 <_printf_i+0x1c8>
 8003072:	2f58      	cmp	r7, #88	@ 0x58
 8003074:	f000 80ba 	beq.w	80031ec <_printf_i+0x19c>
 8003078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800307c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003080:	e03a      	b.n	80030f8 <_printf_i+0xa8>
 8003082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003086:	2b15      	cmp	r3, #21
 8003088:	d8f6      	bhi.n	8003078 <_printf_i+0x28>
 800308a:	a101      	add	r1, pc, #4	@ (adr r1, 8003090 <_printf_i+0x40>)
 800308c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003079 	.word	0x08003079
 800309c:	08003079 	.word	0x08003079
 80030a0:	08003079 	.word	0x08003079
 80030a4:	08003079 	.word	0x08003079
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003079 	.word	0x08003079
 80030b0:	08003079 	.word	0x08003079
 80030b4:	08003079 	.word	0x08003079
 80030b8:	08003079 	.word	0x08003079
 80030bc:	080031ff 	.word	0x080031ff
 80030c0:	08003127 	.word	0x08003127
 80030c4:	080031b9 	.word	0x080031b9
 80030c8:	08003079 	.word	0x08003079
 80030cc:	08003079 	.word	0x08003079
 80030d0:	08003221 	.word	0x08003221
 80030d4:	08003079 	.word	0x08003079
 80030d8:	08003127 	.word	0x08003127
 80030dc:	08003079 	.word	0x08003079
 80030e0:	08003079 	.word	0x08003079
 80030e4:	080031c1 	.word	0x080031c1
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6032      	str	r2, [r6, #0]
 80030f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e09e      	b.n	800323a <_printf_i+0x1ea>
 80030fc:	6833      	ldr	r3, [r6, #0]
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	1d19      	adds	r1, r3, #4
 8003102:	6031      	str	r1, [r6, #0]
 8003104:	0606      	lsls	r6, r0, #24
 8003106:	d501      	bpl.n	800310c <_printf_i+0xbc>
 8003108:	681d      	ldr	r5, [r3, #0]
 800310a:	e003      	b.n	8003114 <_printf_i+0xc4>
 800310c:	0645      	lsls	r5, r0, #25
 800310e:	d5fb      	bpl.n	8003108 <_printf_i+0xb8>
 8003110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003114:	2d00      	cmp	r5, #0
 8003116:	da03      	bge.n	8003120 <_printf_i+0xd0>
 8003118:	232d      	movs	r3, #45	@ 0x2d
 800311a:	426d      	negs	r5, r5
 800311c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003120:	230a      	movs	r3, #10
 8003122:	4859      	ldr	r0, [pc, #356]	@ (8003288 <_printf_i+0x238>)
 8003124:	e011      	b.n	800314a <_printf_i+0xfa>
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	0608      	lsls	r0, r1, #24
 800312c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003130:	d402      	bmi.n	8003138 <_printf_i+0xe8>
 8003132:	0649      	lsls	r1, r1, #25
 8003134:	bf48      	it	mi
 8003136:	b2ad      	uxthmi	r5, r5
 8003138:	2f6f      	cmp	r7, #111	@ 0x6f
 800313a:	6033      	str	r3, [r6, #0]
 800313c:	bf14      	ite	ne
 800313e:	230a      	movne	r3, #10
 8003140:	2308      	moveq	r3, #8
 8003142:	4851      	ldr	r0, [pc, #324]	@ (8003288 <_printf_i+0x238>)
 8003144:	2100      	movs	r1, #0
 8003146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800314a:	6866      	ldr	r6, [r4, #4]
 800314c:	2e00      	cmp	r6, #0
 800314e:	bfa8      	it	ge
 8003150:	6821      	ldrge	r1, [r4, #0]
 8003152:	60a6      	str	r6, [r4, #8]
 8003154:	bfa4      	itt	ge
 8003156:	f021 0104 	bicge.w	r1, r1, #4
 800315a:	6021      	strge	r1, [r4, #0]
 800315c:	b90d      	cbnz	r5, 8003162 <_printf_i+0x112>
 800315e:	2e00      	cmp	r6, #0
 8003160:	d04b      	beq.n	80031fa <_printf_i+0x1aa>
 8003162:	4616      	mov	r6, r2
 8003164:	fbb5 f1f3 	udiv	r1, r5, r3
 8003168:	fb03 5711 	mls	r7, r3, r1, r5
 800316c:	5dc7      	ldrb	r7, [r0, r7]
 800316e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003172:	462f      	mov	r7, r5
 8003174:	42bb      	cmp	r3, r7
 8003176:	460d      	mov	r5, r1
 8003178:	d9f4      	bls.n	8003164 <_printf_i+0x114>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d10b      	bne.n	8003196 <_printf_i+0x146>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07df      	lsls	r7, r3, #31
 8003182:	d508      	bpl.n	8003196 <_printf_i+0x146>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	4299      	cmp	r1, r3
 800318a:	bfde      	ittt	le
 800318c:	2330      	movle	r3, #48	@ 0x30
 800318e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003196:	1b92      	subs	r2, r2, r6
 8003198:	6122      	str	r2, [r4, #16]
 800319a:	464b      	mov	r3, r9
 800319c:	4621      	mov	r1, r4
 800319e:	4640      	mov	r0, r8
 80031a0:	f8cd a000 	str.w	sl, [sp]
 80031a4:	aa03      	add	r2, sp, #12
 80031a6:	f7ff fee1 	bl	8002f6c <_printf_common>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d14a      	bne.n	8003244 <_printf_i+0x1f4>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b004      	add	sp, #16
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	2778      	movs	r7, #120	@ 0x78
 80031c2:	4832      	ldr	r0, [pc, #200]	@ (800328c <_printf_i+0x23c>)
 80031c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	6831      	ldr	r1, [r6, #0]
 80031cc:	061f      	lsls	r7, r3, #24
 80031ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80031d2:	d402      	bmi.n	80031da <_printf_i+0x18a>
 80031d4:	065f      	lsls	r7, r3, #25
 80031d6:	bf48      	it	mi
 80031d8:	b2ad      	uxthmi	r5, r5
 80031da:	6031      	str	r1, [r6, #0]
 80031dc:	07d9      	lsls	r1, r3, #31
 80031de:	bf44      	itt	mi
 80031e0:	f043 0320 	orrmi.w	r3, r3, #32
 80031e4:	6023      	strmi	r3, [r4, #0]
 80031e6:	b11d      	cbz	r5, 80031f0 <_printf_i+0x1a0>
 80031e8:	2310      	movs	r3, #16
 80031ea:	e7ab      	b.n	8003144 <_printf_i+0xf4>
 80031ec:	4826      	ldr	r0, [pc, #152]	@ (8003288 <_printf_i+0x238>)
 80031ee:	e7e9      	b.n	80031c4 <_printf_i+0x174>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f023 0320 	bic.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e7f6      	b.n	80031e8 <_printf_i+0x198>
 80031fa:	4616      	mov	r6, r2
 80031fc:	e7bd      	b.n	800317a <_printf_i+0x12a>
 80031fe:	6833      	ldr	r3, [r6, #0]
 8003200:	6825      	ldr	r5, [r4, #0]
 8003202:	1d18      	adds	r0, r3, #4
 8003204:	6961      	ldr	r1, [r4, #20]
 8003206:	6030      	str	r0, [r6, #0]
 8003208:	062e      	lsls	r6, r5, #24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	d501      	bpl.n	8003212 <_printf_i+0x1c2>
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e002      	b.n	8003218 <_printf_i+0x1c8>
 8003212:	0668      	lsls	r0, r5, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0x1be>
 8003216:	8019      	strh	r1, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	4616      	mov	r6, r2
 800321c:	6123      	str	r3, [r4, #16]
 800321e:	e7bc      	b.n	800319a <_printf_i+0x14a>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	2100      	movs	r1, #0
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	6032      	str	r2, [r6, #0]
 8003228:	681e      	ldr	r6, [r3, #0]
 800322a:	6862      	ldr	r2, [r4, #4]
 800322c:	4630      	mov	r0, r6
 800322e:	f000 f859 	bl	80032e4 <memchr>
 8003232:	b108      	cbz	r0, 8003238 <_printf_i+0x1e8>
 8003234:	1b80      	subs	r0, r0, r6
 8003236:	6060      	str	r0, [r4, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	6123      	str	r3, [r4, #16]
 800323c:	2300      	movs	r3, #0
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003242:	e7aa      	b.n	800319a <_printf_i+0x14a>
 8003244:	4632      	mov	r2, r6
 8003246:	4649      	mov	r1, r9
 8003248:	4640      	mov	r0, r8
 800324a:	6923      	ldr	r3, [r4, #16]
 800324c:	47d0      	blx	sl
 800324e:	3001      	adds	r0, #1
 8003250:	d0ad      	beq.n	80031ae <_printf_i+0x15e>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	079b      	lsls	r3, r3, #30
 8003256:	d413      	bmi.n	8003280 <_printf_i+0x230>
 8003258:	68e0      	ldr	r0, [r4, #12]
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	4298      	cmp	r0, r3
 800325e:	bfb8      	it	lt
 8003260:	4618      	movlt	r0, r3
 8003262:	e7a6      	b.n	80031b2 <_printf_i+0x162>
 8003264:	2301      	movs	r3, #1
 8003266:	4632      	mov	r2, r6
 8003268:	4649      	mov	r1, r9
 800326a:	4640      	mov	r0, r8
 800326c:	47d0      	blx	sl
 800326e:	3001      	adds	r0, #1
 8003270:	d09d      	beq.n	80031ae <_printf_i+0x15e>
 8003272:	3501      	adds	r5, #1
 8003274:	68e3      	ldr	r3, [r4, #12]
 8003276:	9903      	ldr	r1, [sp, #12]
 8003278:	1a5b      	subs	r3, r3, r1
 800327a:	42ab      	cmp	r3, r5
 800327c:	dcf2      	bgt.n	8003264 <_printf_i+0x214>
 800327e:	e7eb      	b.n	8003258 <_printf_i+0x208>
 8003280:	2500      	movs	r5, #0
 8003282:	f104 0619 	add.w	r6, r4, #25
 8003286:	e7f5      	b.n	8003274 <_printf_i+0x224>
 8003288:	08003403 	.word	0x08003403
 800328c:	08003414 	.word	0x08003414

08003290 <memmove>:
 8003290:	4288      	cmp	r0, r1
 8003292:	b510      	push	{r4, lr}
 8003294:	eb01 0402 	add.w	r4, r1, r2
 8003298:	d902      	bls.n	80032a0 <memmove+0x10>
 800329a:	4284      	cmp	r4, r0
 800329c:	4623      	mov	r3, r4
 800329e:	d807      	bhi.n	80032b0 <memmove+0x20>
 80032a0:	1e43      	subs	r3, r0, #1
 80032a2:	42a1      	cmp	r1, r4
 80032a4:	d008      	beq.n	80032b8 <memmove+0x28>
 80032a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ae:	e7f8      	b.n	80032a2 <memmove+0x12>
 80032b0:	4601      	mov	r1, r0
 80032b2:	4402      	add	r2, r0
 80032b4:	428a      	cmp	r2, r1
 80032b6:	d100      	bne.n	80032ba <memmove+0x2a>
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032c2:	e7f7      	b.n	80032b4 <memmove+0x24>

080032c4 <_sbrk_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	2300      	movs	r3, #0
 80032c8:	4d05      	ldr	r5, [pc, #20]	@ (80032e0 <_sbrk_r+0x1c>)
 80032ca:	4604      	mov	r4, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	602b      	str	r3, [r5, #0]
 80032d0:	f7fd ffa4 	bl	800121c <_sbrk>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_sbrk_r+0x1a>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_sbrk_r+0x1a>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20000320 	.word	0x20000320

080032e4 <memchr>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	b510      	push	{r4, lr}
 80032e8:	b2c9      	uxtb	r1, r1
 80032ea:	4402      	add	r2, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	d101      	bne.n	80032f6 <memchr+0x12>
 80032f2:	2000      	movs	r0, #0
 80032f4:	e003      	b.n	80032fe <memchr+0x1a>
 80032f6:	7804      	ldrb	r4, [r0, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	428c      	cmp	r4, r1
 80032fc:	d1f6      	bne.n	80032ec <memchr+0x8>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <memcpy>:
 8003300:	440a      	add	r2, r1
 8003302:	4291      	cmp	r1, r2
 8003304:	f100 33ff 	add.w	r3, r0, #4294967295
 8003308:	d100      	bne.n	800330c <memcpy+0xc>
 800330a:	4770      	bx	lr
 800330c:	b510      	push	{r4, lr}
 800330e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003312:	4291      	cmp	r1, r2
 8003314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003318:	d1f9      	bne.n	800330e <memcpy+0xe>
 800331a:	bd10      	pop	{r4, pc}

0800331c <_realloc_r>:
 800331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003320:	4680      	mov	r8, r0
 8003322:	4615      	mov	r5, r2
 8003324:	460c      	mov	r4, r1
 8003326:	b921      	cbnz	r1, 8003332 <_realloc_r+0x16>
 8003328:	4611      	mov	r1, r2
 800332a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800332e:	f7ff bc39 	b.w	8002ba4 <_malloc_r>
 8003332:	b92a      	cbnz	r2, 8003340 <_realloc_r+0x24>
 8003334:	f7ff fbcc 	bl	8002ad0 <_free_r>
 8003338:	2400      	movs	r4, #0
 800333a:	4620      	mov	r0, r4
 800333c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003340:	f000 f81a 	bl	8003378 <_malloc_usable_size_r>
 8003344:	4285      	cmp	r5, r0
 8003346:	4606      	mov	r6, r0
 8003348:	d802      	bhi.n	8003350 <_realloc_r+0x34>
 800334a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800334e:	d8f4      	bhi.n	800333a <_realloc_r+0x1e>
 8003350:	4629      	mov	r1, r5
 8003352:	4640      	mov	r0, r8
 8003354:	f7ff fc26 	bl	8002ba4 <_malloc_r>
 8003358:	4607      	mov	r7, r0
 800335a:	2800      	cmp	r0, #0
 800335c:	d0ec      	beq.n	8003338 <_realloc_r+0x1c>
 800335e:	42b5      	cmp	r5, r6
 8003360:	462a      	mov	r2, r5
 8003362:	4621      	mov	r1, r4
 8003364:	bf28      	it	cs
 8003366:	4632      	movcs	r2, r6
 8003368:	f7ff ffca 	bl	8003300 <memcpy>
 800336c:	4621      	mov	r1, r4
 800336e:	4640      	mov	r0, r8
 8003370:	f7ff fbae 	bl	8002ad0 <_free_r>
 8003374:	463c      	mov	r4, r7
 8003376:	e7e0      	b.n	800333a <_realloc_r+0x1e>

08003378 <_malloc_usable_size_r>:
 8003378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337c:	1f18      	subs	r0, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfbc      	itt	lt
 8003382:	580b      	ldrlt	r3, [r1, r0]
 8003384:	18c0      	addlt	r0, r0, r3
 8003386:	4770      	bx	lr

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
